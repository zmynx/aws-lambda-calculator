# .github/workflows/cd.yaml
---
name: CD
on:
  pull_request:
    branches: [main]
    types: [closed]

permissions:
  contents: read

jobs:
  check-pr-status:
    name: Check PR Status
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: check if PR is merged
        uses: zmynx/org-github-actions/.github/actions/git/check-merge@main

  package:
    needs: check-pr-status
    name: Package library
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        working-directory: aws-lambda-calculator
        shell: bash
    outputs:
      release_version: ${{ steps.release-version.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Install poetry
        run: pipx install poetry==2.1.1

      - name: Setup Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version-file: pyproject.toml
          cache: poetry

      - name: Setup poetry
        run: |
          python --version
          python -m pip install --upgrade pip
          python -m pip install poetry==2.1.1

      - name: Install dependencies
        run: python -m poetry install

      - name: Update package version
        run: python -m poetry version patch

      - name: Output the version
        id: release-version
        run: echo "release_version=$(python -m poetry version --short)" >> $GITHUB_OUTPUT

      - name: Create a package
        run: python -m poetry build

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.1
        with:
          name: aws_lambda_calculator
          path: |
            aws-lambda-calculator/dist/*.whl
            aws-lambda-calculator/dist/*.tar.gz
          if-no-files-found: error
          retention-days: 1
          overwrite: true
          include-hidden-files: false

  test-package:
    needs: package
    name: Test uploaded package
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: Install poetry
        run: pipx install poetry==2.1.1

      - name: Setup Python
        uses: actions/setup-python@v5.4.0
        with:
          python-version-file: pyproject.toml
          cache: poetry

      - name: Setup poetry
        run: |
          python --version
          python -m pip install --upgrade pip
          python -m pip install poetry==2.1.1

      - name: Download a Build Artifact
        id: download-artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: aws_lambda_calculator
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}

      - name: Add the package
        run: python -m poetry add ${{ steps.download-artifact.outputs.download-path }}/aws_lambda_calculator-${{ needs.package.outputs.release_version }}-py3-none-any.whl

      - name: Install dependencies
        run: python -m poetry install

      - name: Test the new package
        run: python -m poetry run pytest

  build-push-sign:
    needs:
      - package
      - test-package
    name: Build Container, Push to Registry, and Sign with Cosign
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # needed for signing the images with GitHub OIDC Token
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 1
          persist-credentials: false

      - name: Download a Build Artifact
        id: download-artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: aws_lambda_calculator
          path: ${{ github.workspace }}/dist
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}

      - name: Add artifact to requirements.txt file
        run: echo "./dist/aws_lambda_calculator-${{ needs.package.outputs.release_version }}-py3-none-any.whl" >> ./requirements.txt

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.8.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - id: docker_meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ghcr.io/${{ github.repository }}
          tags: type=sha,format=long

      - name: Build and Push container images
        uses: docker/build-push-action@v6.15.0
        id: build-and-push
        with:
          context: .
          file: Containerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          labels: |
            project='aws-lambda-calculator'
            org='zmynx'
            commit-sha='${{ github.sha }}'
            version='${{ needs.package.outputs.release_version }}'
            org.opencontainers.image.source='https://github.com/${{ github.repository }}'
            org.opencontainers.image.description='AWS Lambda Calculator is the only extensive and thorough cost estimation tool for the AWS Lambda product. It's based on a simple API that produces a cost estimation based on different Lambda configuration variables and parameters such as CPU, RAM, concurrency, invocations, free tier, and much more. This can be helpful for any FinOps fields or tools in the future.'
            org.opencontainers.image.licenses='Apache-2.0'
          tags: |
            ${{ steps.docker_meta.outputs.tags }}
            ghcr.io/${{ github.repository }}:${{ github.sha }}
            ghcr.io/${{ github.repository }}:${{ needs.package.outputs.release_version }}
            ghcr.io/${{ github.repository }}:latest
          provenance: true
          sbom: true
          push: true

      - name: Sign and verify the images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
          # cosign verify ${images} \
          #   --certificate-identity='https://github.com/${{ github.repository }}/.github/workflows/cd.yaml@refs/heads/${{ github.ref }}' \
          #   --certificate-oidc-issuer='https://token.actions.githubusercontent.com'

      #############################################
      # PODMAN
      # - name: Build an image from Dockerfile
      #   id: build
      #   run: podman build --file Containerfile . --tag ghcr.io/'${{ github.repository }}':'${{ github.sha }}'
      #
      # - name: Log in to ghcr.io
      #   uses: redhat-actions/podman-login@v1
      #   with:
      #     username: ${{ github.actor }}
      #     password: ${{ github.token }}
      #     registry: ghcr.io/${{ github.repository }}
      #
      # - name: Push image to registry
      #   id: push
      #   run: podman push ghcr.io/'${{ github.repository }}':'${{ github.sha }}'


      #############################################
      # PODMAN
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     image-ref: ${{ needs.check-pr-status.outputs.tagged_image }}
      #     format: table
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'

# spbom:
  #   needs:
  #   name: Generate SPBOM
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4.2.2
  #
  #     - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
  #       uses: aquasecurity/trivy-action@0.28.0
  #       with:
  #         scan-type: fs
  #         format: github
  #         output: dependency-results.sbom.json
  #         image-ref: .
  #         github-pat: ${{ github.token }}
  #
  # scan:
  #   name: Scan Image
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #     id-token: write
  #     security-events: write
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #
  #     - name: Checkout
  #       uses: actions/checkout@v4.2.2
  #
  #     - name: Run Trivy vulnerability scanner
  #       uses: aquasecurity/trivy-action@0.29.0
  #       with:
  #         image-ref: ${{ env.TAGGED_IMAGE }}
  #         format: 'sarif'
  #         output: 'trivy-results.sarif'
  #
  #     - name: Upload Trivy scan results to GitHub Security tab
  #       uses: github/codeql-action/upload-sarif@v1
  #       with:
  #         sarif_file: 'trivy-results.sarif'
  #

  tag:
    needs:
      - package
      - build-push-sign
    name: Add Official tags
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          ref: main
          fetch-depth: 0

      - name: Git tag
        run: |
          git config --local user.name github-actions[bot]
          git config --local user.email github-actions[bot]@zmynx.users.noreply.github.com
          git tag v${{ needs.package.outputs.release_version }} -m "Release v${{ needs.package.outputs.release_version }}"
          git push origin v${{ needs.package.outputs.release_version }}
      #
      # - name: "Import GPG key"
      #   id: import-gpg
      #   uses: crazy-max/ghaction-import-gpg@v6
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.GPG_PASSPHRASE }}
      #     git_user_signingkey: true
      #     git_commit_gpgsign: true
      #
      # - name: "Commit and push changes"
      #   uses: stefanzweifel/git-auto-commit-action@v5
      #   with:
      #      commit_author: "${{ steps.import-gpg.outputs.name }} <${{ steps.import-gpg.outputs.email }}>"
      #      commit_user_name: ${{ steps.import-gpg.outputs.name }}
      #      commit_user_email: ${{ steps.import-gpg.outputs.email }}
      #
      # - name: Git Auto Commit
      #   uses: stefanzweifel/git-auto-commit-action@v5.1.0
      #   with:
      #     commit_message: Automated Change
      #     branch: main
      #     # repository: ${{ github.repository }}
      #     commit_user_name: github-actions[bot]
      #     commit_user_email: github-actions[bot]@zmynx.users.noreply.github.com
      #     tagging_message: Release v${{ needs.package.outputs.release_version }}
      #     skip_dirty_check: true
      #     skip_fetch: true
      #     skip_checkout: true
      #     disable_globbing: true
      #     create_branch: false
      #

      #############################################
      # PODMAN w/ Cosign
      # - name: Log in to ghcr.io
      #   uses: redhat-actions/podman-login@v1
      #   with:
      #     username: ${{ github.actor }}
      #     password: ${{ github.token }}
      #     registry: ghcr.io/${{ github.repository }}
      #
      # - name: Push image to registry
      #   id: push
      #   run: |
      #     podman pull ghcr.io/'${{ github.repository }}':'${{ github.sha }}'
      #     podman tag ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':'${{ needs.package.outputs.release_version }}'
      #     podman push ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':'${{ needs.package.outputs.release_version }}'
      #     podman tag ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':latest
      #     podman push ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':latest
      #
      # - name: cosign-installer
      #   uses: sigstore/cosign-installer@v2.0.0
      #
      # - name: place the cosign private key in a file
      #   env:
      #     COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
      #   run: echo "$COSIGN_PRIVATE_KEY" > /tmp/cosign.key
      #
      # - name: Sign image with a key
      #   env:
      #     COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
      #   run: |
      #     cosign sign --key /tmp/cosign.key ghcr.io/${{ github.repository }}:latest

  # verify:
  #   needs:
  #     - package
  #     - tag
  #   name: Verify Image
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash
  #   steps:
  #
  #     - name: Checkout
  #       uses: actions/checkout@v4.2.2
  #       with:
  #         ref: main
  #         sparse-checkout: cosign.pub
  #
  #     - name: cosign-installer
  #       uses: sigstore/cosign-installer@v2.0.0
  #
  #     - name: Verify the signed image
  #       run: |
  #         cosign verify \
  #           --key cosign.pub \
  #           ghcr.io/'${{ github.repository }}':'${{ needs.package.outputs.release_version }}'

  release:
    needs:
      - package
      - tag
    name: GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Download a Build Artifact
        id: download-artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: aws_lambda_calculator
          github-token: ${{ github.token }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}

      - name: GH Release
        uses: softprops/action-gh-release@v2.2.1
        with:
          name: v${{ needs.package.outputs.release_version }}
          tag_name: v${{ needs.package.outputs.release_version }}
          files: |
            aws_lambda_calculator-${{ needs.package.outputs.release_version }}-py3-none-any.whl
            aws_lambda_calculator-${{ needs.package.outputs.release_version }}.tar.gz
          draft: false
          repository: ${{ github.repository }}
          token: ${{ github.token }}
          generate_release_notes: true
          make_latest: true
