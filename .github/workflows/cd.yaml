# .github/workflows/cd.yaml
---
name: CD
on:
  pull_request:
    branches: [main]
    types: [closed]

permissions:
  contents: read

jobs:
  check-pr-status:
    name: Check PR Status
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: check if PR is merged
        uses: zmynx/org-github-actions/.github/actions/git/check-merge@main

  package:
    needs: check-pr-status
    name: Package library
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      attestations: write
    defaults:
      run:
        working-directory: aws-lambda-calculator
        shell: bash
    outputs:
      release_version: ${{ steps.release-version.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Install poetry
        run: pipx install poetry==2.1.1

      - name: Setup Python
        uses: actions/setup-python@3d1e2d2ca0a067f27da6fec484fce7f5256def85 # v5.6.0
        with:
          python-version-file: pyproject.toml
          cache: poetry

      - name: Setup poetry
        run: |
          python --version
          python -m pip install --upgrade pip
          python -m pip install poetry==2.1.1

      - name: Install dependencies
        run: python -m poetry install

      - name: Fetch the latest version
        run: |
          echo "Fetching the latest version..."
          latest_version=$(git tag | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)

          echo "Updating the pyproject.toml version using git tag..."
          python -m poetry version $latest_version
          cat pyproject.toml | grep version

      - name: Output the version
        id: release-version
        run: |
          echo "Patch versioning using poetry..."
          release_version=$(python -m poetry version patch --short)
          python -m poetry version --short
          cat pyproject.toml | grep version
          echo "release_version=$release_version" >> $GITHUB_OUTPUT

      - name: Run the pricing scraper to generate json data
        run: python -m poetry run python src/aws_lambda_calculator/pricing_scraper.py

      - name: Create a package
        run: python -m poetry build

      - name: Upload a Build Artifact
        id: upload
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: aws_lambda_calculator
          path: |
            aws-lambda-calculator/dist/*.whl
            aws-lambda-calculator/dist/*.tar.gz
          if-no-files-found: error
          retention-days: 1
          overwrite: true
          include-hidden-files: false

      - uses: actions/attest-build-provenance@0b6e9809265278d02c58acf52849a95818a5a306 # v3.0.0
        with:
          subject-name: aws_lambda_calculator
          subject-digest: sha256:${{ steps.upload.outputs.artifact-digest }}

  tag:
    needs:
      - package
    name: Add Official tags
    runs-on: ubuntu-latest
    permissions:
      contents: write
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0
        with:
          fetch-depth: 0

      # - name: "Import GPG key"
      #   id: import-gpg
      #   uses: crazy-max/ghaction-import-gpg@v6
      #   with:
      #     gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
      #     passphrase: ${{ secrets.GPG_PASSPHRASE }}
      #     git_user_signingkey: true
      #     git_commit_gpgsign: true

      - uses: zmynx/git-auto-commit-action@master
        with:
          git_tag_only: true
          commit_message: Release v${{ needs.package.outputs.release_version }}
          branch: main
          repository: .
          commit_user_name: github-actions[bot]
          commit_user_email: github-actions[bot]@zmynx.users.noreply.github.com
          commit_author: Author <actions@github.com> # defaults to "username <username@users.noreply.github.com>", where "username" belongs to the author of the commit that triggered the run
          tagging_message: ${{ needs.package.outputs.release_version }}

      # - name: Git tag
      #   run: |
      #     git config --local user.name github-actions[bot] #${{ steps.import-gpg.outputs.name }}
      #     git config --local user.email github-actions[bot]@zmynx.users.noreply.github.com # ${{ steps.import-gpg.outputs.email }}
      #     git tag ${{ needs.package.outputs.release_version }} -m "Release v${{ needs.package.outputs.release_version }}"
      #     git push origin ${{ needs.package.outputs.release_version }}

      #############################################
      # PODMAN w/ Cosign
      # - name: Log in to ghcr.io
      #   uses: redhat-actions/podman-login@v1
      #   with:
      #     username: ${{ github.actor }}
      #     password: ${{ github.token }}
      #     registry: ghcr.io/${{ github.repository }}
      #
      # - name: Push image to registry
      #   id: push
      #   run: |
      #     podman pull ghcr.io/'${{ github.repository }}':'${{ github.sha }}'
      #     podman tag ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':'${{ needs.package.outputs.release_version }}'
      #     podman push ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':'${{ needs.package.outputs.release_version }}'
      #     podman tag ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':latest
      #     podman push ghcr.io/'${{ github.repository }}':'${{ github.sha }}' ghcr.io/'${{ github.repository }}':latest
