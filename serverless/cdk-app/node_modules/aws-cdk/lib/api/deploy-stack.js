"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsSuccessfulDeployStackResult = assertIsSuccessfulDeployStackResult;
exports.deployStack = deployStack;
exports.destroyStack = destroyStack;
const chalk = require("chalk");
const uuid = require("uuid");
const evaluate_cloudformation_template_1 = require("./evaluate-cloudformation-template");
const common_1 = require("./hotswap/common");
const hotswap_deployments_1 = require("./hotswap-deployments");
const assets_1 = require("../assets");
const logging_1 = require("../logging");
const cloudformation_1 = require("./util/cloudformation");
const stack_activity_monitor_1 = require("./util/cloudformation/stack-activity-monitor");
const template_body_parameter_1 = require("./util/template-body-parameter");
const asset_manifest_builder_1 = require("../util/asset-manifest-builder");
const checks_1 = require("./util/checks");
const asset_publishing_1 = require("../util/asset-publishing");
const error_1 = require("../util/error");
function assertIsSuccessfulDeployStackResult(x) {
    if (x.type !== 'did-deploy-stack') {
        throw new Error(`Unexpected deployStack result. This should not happen: ${JSON.stringify(x)}. If you are seeing this error, please report it at https://github.com/aws/aws-cdk/issues/new/choose.`);
    }
}
async function deployStack(options) {
    const stackArtifact = options.stack;
    const stackEnv = options.resolvedEnvironment;
    options.sdk.appendCustomUserAgent(options.extraUserAgent);
    const cfn = options.sdk.cloudFormation();
    const deployName = options.deployName || stackArtifact.stackName;
    let cloudFormationStack = await cloudformation_1.CloudFormationStack.lookup(cfn, deployName);
    if (cloudFormationStack.stackStatus.isCreationFailure) {
        (0, logging_1.debug)(`Found existing stack ${deployName} that had previously failed creation. Deleting it before attempting to re-create it.`);
        await cfn.deleteStack({ StackName: deployName });
        const deletedStack = await (0, cloudformation_1.waitForStackDelete)(cfn, deployName);
        if (deletedStack && deletedStack.stackStatus.name !== 'DELETE_COMPLETE') {
            throw new Error(`Failed deleting stack ${deployName} that had previously failed creation (current state: ${deletedStack.stackStatus})`);
        }
        // Update variable to mark that the stack does not exist anymore, but avoid
        // doing an actual lookup in CloudFormation (which would be silly to do if
        // we just deleted it).
        cloudFormationStack = cloudformation_1.CloudFormationStack.doesNotExist(cfn, deployName);
    }
    // Detect "legacy" assets (which remain in the metadata) and publish them via
    // an ad-hoc asset manifest, while passing their locations via template
    // parameters.
    const legacyAssets = new asset_manifest_builder_1.AssetManifestBuilder();
    const assetParams = await (0, assets_1.addMetadataAssetsToManifest)(stackArtifact, legacyAssets, options.envResources, options.reuseAssets);
    const finalParameterValues = { ...options.parameters, ...assetParams };
    const templateParams = cloudformation_1.TemplateParameters.fromTemplate(stackArtifact.template);
    const stackParams = options.usePreviousParameters
        ? templateParams.updateExisting(finalParameterValues, cloudFormationStack.parameters)
        : templateParams.supplyAll(finalParameterValues);
    const hotswapMode = options.hotswap ?? common_1.HotswapMode.FULL_DEPLOYMENT;
    const hotswapPropertyOverrides = options.hotswapPropertyOverrides ?? new common_1.HotswapPropertyOverrides();
    if (await canSkipDeploy(options, cloudFormationStack, stackParams.hasChanges(cloudFormationStack.parameters))) {
        (0, logging_1.debug)(`${deployName}: skipping deployment (use --force to override)`);
        // if we can skip deployment and we are performing a hotswap, let the user know
        // that no hotswap deployment happened
        if (hotswapMode !== common_1.HotswapMode.FULL_DEPLOYMENT) {
            (0, logging_1.info)(`\n ${common_1.ICON} %s\n`, chalk.bold('hotswap deployment skipped - no changes were detected (use --force to override)'));
        }
        return {
            type: 'did-deploy-stack',
            noOp: true,
            outputs: cloudFormationStack.outputs,
            stackArn: cloudFormationStack.stackId,
        };
    }
    else {
        (0, logging_1.debug)(`${deployName}: deploying...`);
    }
    const bodyParameter = await (0, template_body_parameter_1.makeBodyParameter)(stackArtifact, options.resolvedEnvironment, legacyAssets, options.envResources, options.overrideTemplate);
    let bootstrapStackName;
    try {
        bootstrapStackName = (await options.envResources.lookupToolkit()).stackName;
    }
    catch (e) {
        (0, logging_1.debug)(`Could not determine the bootstrap stack name: ${e}`);
    }
    await (0, asset_publishing_1.publishAssets)(legacyAssets.toManifest(stackArtifact.assembly.directory), options.sdkProvider, stackEnv, {
        parallel: options.assetParallelism,
        allowCrossAccount: await (0, checks_1.determineAllowCrossAccountAssetPublishing)(options.sdk, bootstrapStackName),
    });
    if (hotswapMode !== common_1.HotswapMode.FULL_DEPLOYMENT) {
        // attempt to short-circuit the deployment if possible
        try {
            const hotswapDeploymentResult = await (0, hotswap_deployments_1.tryHotswapDeployment)(options.sdkProvider, stackParams.values, cloudFormationStack, stackArtifact, hotswapMode, hotswapPropertyOverrides);
            if (hotswapDeploymentResult) {
                return hotswapDeploymentResult;
            }
            (0, logging_1.info)('Could not perform a hotswap deployment, as the stack %s contains non-Asset changes', stackArtifact.displayName);
        }
        catch (e) {
            if (!(e instanceof evaluate_cloudformation_template_1.CfnEvaluationException)) {
                throw e;
            }
            (0, logging_1.info)('Could not perform a hotswap deployment, because the CloudFormation template could not be resolved: %s', (0, error_1.formatErrorMessage)(e));
        }
        if (hotswapMode === common_1.HotswapMode.FALL_BACK) {
            (0, logging_1.info)('Falling back to doing a full deployment');
            options.sdk.appendCustomUserAgent('cdk-hotswap/fallback');
        }
        else {
            return {
                type: 'did-deploy-stack',
                noOp: true,
                stackArn: cloudFormationStack.stackId,
                outputs: cloudFormationStack.outputs,
            };
        }
    }
    // could not short-circuit the deployment, perform a full CFN deploy instead
    const fullDeployment = new FullCloudFormationDeployment(options, cloudFormationStack, stackArtifact, stackParams, bodyParameter);
    return fullDeployment.performDeployment();
}
/**
 * This class shares state and functionality between the different full deployment modes
 */
class FullCloudFormationDeployment {
    constructor(options, cloudFormationStack, stackArtifact, stackParams, bodyParameter) {
        this.options = options;
        this.cloudFormationStack = cloudFormationStack;
        this.stackArtifact = stackArtifact;
        this.stackParams = stackParams;
        this.bodyParameter = bodyParameter;
        this.cfn = options.sdk.cloudFormation();
        this.stackName = options.deployName ?? stackArtifact.stackName;
        this.update = cloudFormationStack.exists && cloudFormationStack.stackStatus.name !== 'REVIEW_IN_PROGRESS';
        this.verb = this.update ? 'update' : 'create';
        this.uuid = uuid.v4();
    }
    async performDeployment() {
        const deploymentMethod = this.options.deploymentMethod ?? {
            method: 'change-set',
        };
        if (deploymentMethod.method === 'direct' && this.options.resourcesToImport) {
            throw new Error('Importing resources requires a changeset deployment');
        }
        switch (deploymentMethod.method) {
            case 'change-set':
                return this.changeSetDeployment(deploymentMethod);
            case 'direct':
                return this.directDeployment();
        }
    }
    async changeSetDeployment(deploymentMethod) {
        const changeSetName = deploymentMethod.changeSetName ?? 'cdk-deploy-change-set';
        const execute = deploymentMethod.execute ?? true;
        const importExistingResources = deploymentMethod.importExistingResources ?? false;
        const changeSetDescription = await this.createChangeSet(changeSetName, execute, importExistingResources);
        await this.updateTerminationProtection();
        if ((0, cloudformation_1.changeSetHasNoChanges)(changeSetDescription)) {
            (0, logging_1.debug)('No changes are to be performed on %s.', this.stackName);
            if (execute) {
                (0, logging_1.debug)('Deleting empty change set %s', changeSetDescription.ChangeSetId);
                await this.cfn.deleteChangeSet({
                    StackName: this.stackName,
                    ChangeSetName: changeSetName,
                });
            }
            if (this.options.force) {
                (0, logging_1.warning)([
                    'You used the --force flag, but CloudFormation reported that the deployment would not make any changes.',
                    'According to CloudFormation, all resources are already up-to-date with the state in your CDK app.',
                    '',
                    'You cannot use the --force flag to get rid of changes you made in the console. Try using',
                    'CloudFormation drift detection instead: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html',
                ].join('\n'));
            }
            return {
                type: 'did-deploy-stack',
                noOp: true,
                outputs: this.cloudFormationStack.outputs,
                stackArn: changeSetDescription.StackId,
            };
        }
        if (!execute) {
            (0, logging_1.info)('Changeset %s created and waiting in review for manual execution (--no-execute)', changeSetDescription.ChangeSetId);
            return {
                type: 'did-deploy-stack',
                noOp: false,
                outputs: this.cloudFormationStack.outputs,
                stackArn: changeSetDescription.StackId,
            };
        }
        // If there are replacements in the changeset, check the rollback flag and stack status
        const replacement = hasReplacement(changeSetDescription);
        const isPausedFailState = this.cloudFormationStack.stackStatus.isRollbackable;
        const rollback = this.options.rollback ?? true;
        if (isPausedFailState && replacement) {
            return { type: 'failpaused-need-rollback-first', reason: 'replacement', status: this.cloudFormationStack.stackStatus.name };
        }
        if (isPausedFailState && rollback) {
            return { type: 'failpaused-need-rollback-first', reason: 'not-norollback', status: this.cloudFormationStack.stackStatus.name };
        }
        if (!rollback && replacement) {
            return { type: 'replacement-requires-rollback' };
        }
        return this.executeChangeSet(changeSetDescription);
    }
    async createChangeSet(changeSetName, willExecute, importExistingResources) {
        await this.cleanupOldChangeset(changeSetName);
        (0, logging_1.debug)(`Attempting to create ChangeSet with name ${changeSetName} to ${this.verb} stack ${this.stackName}`);
        (0, logging_1.info)('%s: creating CloudFormation changeset...', chalk.bold(this.stackName));
        const changeSet = await this.cfn.createChangeSet({
            StackName: this.stackName,
            ChangeSetName: changeSetName,
            ChangeSetType: this.options.resourcesToImport ? 'IMPORT' : this.update ? 'UPDATE' : 'CREATE',
            ResourcesToImport: this.options.resourcesToImport,
            Description: `CDK Changeset for execution ${this.uuid}`,
            ClientToken: `create${this.uuid}`,
            ImportExistingResources: importExistingResources,
            ...this.commonPrepareOptions(),
        });
        (0, logging_1.debug)('Initiated creation of changeset: %s; waiting for it to finish creating...', changeSet.Id);
        // Fetching all pages if we'll execute, so we can have the correct change count when monitoring.
        return (0, cloudformation_1.waitForChangeSet)(this.cfn, this.stackName, changeSetName, {
            fetchAll: willExecute,
        });
    }
    async executeChangeSet(changeSet) {
        (0, logging_1.debug)('Initiating execution of changeset %s on stack %s', changeSet.ChangeSetId, this.stackName);
        await this.cfn.executeChangeSet({
            StackName: this.stackName,
            ChangeSetName: changeSet.ChangeSetName,
            ClientRequestToken: `exec${this.uuid}`,
            ...this.commonExecuteOptions(),
        });
        (0, logging_1.debug)('Execution of changeset %s on stack %s has started; waiting for the update to complete...', changeSet.ChangeSetId, this.stackName);
        // +1 for the extra event emitted from updates.
        const changeSetLength = (changeSet.Changes ?? []).length + (this.update ? 1 : 0);
        return this.monitorDeployment(changeSet.CreationTime, changeSetLength);
    }
    async cleanupOldChangeset(changeSetName) {
        if (this.cloudFormationStack.exists) {
            // Delete any existing change sets generated by CDK since change set names must be unique.
            // The delete request is successful as long as the stack exists (even if the change set does not exist).
            (0, logging_1.debug)(`Removing existing change set with name ${changeSetName} if it exists`);
            await this.cfn.deleteChangeSet({
                StackName: this.stackName,
                ChangeSetName: changeSetName,
            });
        }
    }
    async updateTerminationProtection() {
        // Update termination protection only if it has changed.
        const terminationProtection = this.stackArtifact.terminationProtection ?? false;
        if (!!this.cloudFormationStack.terminationProtection !== terminationProtection) {
            (0, logging_1.debug)('Updating termination protection from %s to %s for stack %s', this.cloudFormationStack.terminationProtection, terminationProtection, this.stackName);
            await this.cfn.updateTerminationProtection({
                StackName: this.stackName,
                EnableTerminationProtection: terminationProtection,
            });
            (0, logging_1.debug)('Termination protection updated to %s for stack %s', terminationProtection, this.stackName);
        }
    }
    async directDeployment() {
        (0, logging_1.info)('%s: %s stack...', chalk.bold(this.stackName), this.update ? 'updating' : 'creating');
        const startTime = new Date();
        if (this.update) {
            await this.updateTerminationProtection();
            try {
                await this.cfn.updateStack({
                    StackName: this.stackName,
                    ClientRequestToken: `update${this.uuid}`,
                    ...this.commonPrepareOptions(),
                    ...this.commonExecuteOptions(),
                });
            }
            catch (err) {
                if (err.message === 'No updates are to be performed.') {
                    (0, logging_1.debug)('No updates are to be performed for stack %s', this.stackName);
                    return {
                        type: 'did-deploy-stack',
                        noOp: true,
                        outputs: this.cloudFormationStack.outputs,
                        stackArn: this.cloudFormationStack.stackId,
                    };
                }
                throw err;
            }
            return this.monitorDeployment(startTime, undefined);
        }
        else {
            // Take advantage of the fact that we can set termination protection during create
            const terminationProtection = this.stackArtifact.terminationProtection ?? false;
            await this.cfn.createStack({
                StackName: this.stackName,
                ClientRequestToken: `create${this.uuid}`,
                ...(terminationProtection ? { EnableTerminationProtection: true } : undefined),
                ...this.commonPrepareOptions(),
                ...this.commonExecuteOptions(),
            });
            return this.monitorDeployment(startTime, undefined);
        }
    }
    async monitorDeployment(startTime, expectedChanges) {
        const monitor = this.options.quiet
            ? undefined
            : stack_activity_monitor_1.StackActivityMonitor.withDefaultPrinter(this.cfn, this.stackName, this.stackArtifact, {
                resourcesTotal: expectedChanges,
                progress: this.options.progress,
                changeSetCreationTime: startTime,
                ci: this.options.ci,
            }).start();
        let finalState = this.cloudFormationStack;
        try {
            const successStack = await (0, cloudformation_1.waitForStackDeploy)(this.cfn, this.stackName);
            // This shouldn't really happen, but catch it anyway. You never know.
            if (!successStack) {
                throw new Error('Stack deploy failed (the stack disappeared while we were deploying it)');
            }
            finalState = successStack;
        }
        catch (e) {
            throw new Error(suffixWithErrors((0, error_1.formatErrorMessage)(e), monitor?.errors));
        }
        finally {
            await monitor?.stop();
        }
        (0, logging_1.debug)('Stack %s has completed updating', this.stackName);
        return {
            type: 'did-deploy-stack',
            noOp: false,
            outputs: finalState.outputs,
            stackArn: finalState.stackId,
        };
    }
    /**
     * Return the options that are shared between CreateStack, UpdateStack and CreateChangeSet
     */
    commonPrepareOptions() {
        return {
            Capabilities: ['CAPABILITY_IAM', 'CAPABILITY_NAMED_IAM', 'CAPABILITY_AUTO_EXPAND'],
            NotificationARNs: this.options.notificationArns,
            Parameters: this.stackParams.apiParameters,
            RoleARN: this.options.roleArn,
            TemplateBody: this.bodyParameter.TemplateBody,
            TemplateURL: this.bodyParameter.TemplateURL,
            Tags: this.options.tags,
        };
    }
    /**
     * Return the options that are shared between UpdateStack and CreateChangeSet
     *
     * Be careful not to add in keys for options that aren't used, as the features may not have been
     * deployed everywhere yet.
     */
    commonExecuteOptions() {
        const shouldDisableRollback = this.options.rollback === false;
        return {
            StackName: this.stackName,
            ...(shouldDisableRollback ? { DisableRollback: true } : undefined),
        };
    }
}
async function destroyStack(options) {
    const deployName = options.deployName || options.stack.stackName;
    const cfn = options.sdk.cloudFormation();
    const currentStack = await cloudformation_1.CloudFormationStack.lookup(cfn, deployName);
    if (!currentStack.exists) {
        return;
    }
    const monitor = options.quiet
        ? undefined
        : stack_activity_monitor_1.StackActivityMonitor.withDefaultPrinter(cfn, deployName, options.stack, {
            ci: options.ci,
        }).start();
    try {
        await cfn.deleteStack({ StackName: deployName, RoleARN: options.roleArn });
        const destroyedStack = await (0, cloudformation_1.waitForStackDelete)(cfn, deployName);
        if (destroyedStack && destroyedStack.stackStatus.name !== 'DELETE_COMPLETE') {
            throw new Error(`Failed to destroy ${deployName}: ${destroyedStack.stackStatus}`);
        }
    }
    catch (e) {
        throw new Error(suffixWithErrors((0, error_1.formatErrorMessage)(e), monitor?.errors));
    }
    finally {
        if (monitor) {
            await monitor.stop();
        }
    }
}
/**
 * Checks whether we can skip deployment
 *
 * We do this in a complicated way by preprocessing (instead of just
 * looking at the changeset), because if there are nested stacks involved
 * the changeset will always show the nested stacks as needing to be
 * updated, and the deployment will take a long time to in effect not
 * do anything.
 */
async function canSkipDeploy(deployStackOptions, cloudFormationStack, parameterChanges) {
    const deployName = deployStackOptions.deployName || deployStackOptions.stack.stackName;
    (0, logging_1.debug)(`${deployName}: checking if we can skip deploy`);
    // Forced deploy
    if (deployStackOptions.force) {
        (0, logging_1.debug)(`${deployName}: forced deployment`);
        return false;
    }
    // Creating changeset only (default true), never skip
    if (deployStackOptions.deploymentMethod?.method === 'change-set' &&
        deployStackOptions.deploymentMethod.execute === false) {
        (0, logging_1.debug)(`${deployName}: --no-execute, always creating change set`);
        return false;
    }
    // No existing stack
    if (!cloudFormationStack.exists) {
        (0, logging_1.debug)(`${deployName}: no existing stack`);
        return false;
    }
    // Template has changed (assets taken into account here)
    if (JSON.stringify(deployStackOptions.stack.template) !== JSON.stringify(await cloudFormationStack.template())) {
        (0, logging_1.debug)(`${deployName}: template has changed`);
        return false;
    }
    // Tags have changed
    if (!compareTags(cloudFormationStack.tags, deployStackOptions.tags ?? [])) {
        (0, logging_1.debug)(`${deployName}: tags have changed`);
        return false;
    }
    // Notification arns have changed
    if (!arrayEquals(cloudFormationStack.notificationArns, deployStackOptions.notificationArns ?? [])) {
        (0, logging_1.debug)(`${deployName}: notification arns have changed`);
        return false;
    }
    // Termination protection has been updated
    if (!!deployStackOptions.stack.terminationProtection !== !!cloudFormationStack.terminationProtection) {
        (0, logging_1.debug)(`${deployName}: termination protection has been updated`);
        return false;
    }
    // Parameters have changed
    if (parameterChanges) {
        if (parameterChanges === 'ssm') {
            (0, logging_1.debug)(`${deployName}: some parameters come from SSM so we have to assume they may have changed`);
        }
        else {
            (0, logging_1.debug)(`${deployName}: parameters have changed`);
        }
        return false;
    }
    // Existing stack is in a failed state
    if (cloudFormationStack.stackStatus.isFailure) {
        (0, logging_1.debug)(`${deployName}: stack is in a failure state`);
        return false;
    }
    // We can skip deploy
    return true;
}
/**
 * Compares two list of tags, returns true if identical.
 */
function compareTags(a, b) {
    if (a.length !== b.length) {
        return false;
    }
    for (const aTag of a) {
        const bTag = b.find((tag) => tag.Key === aTag.Key);
        if (!bTag || bTag.Value !== aTag.Value) {
            return false;
        }
    }
    return true;
}
function suffixWithErrors(msg, errors) {
    return errors && errors.length > 0 ? `${msg}: ${errors.join(', ')}` : msg;
}
function arrayEquals(a, b) {
    return a.every((item) => b.includes(item)) && b.every((item) => a.includes(item));
}
function hasReplacement(cs) {
    return (cs.Changes ?? []).some(c => {
        const a = c.ResourceChange?.PolicyAction;
        return a === 'ReplaceAndDelete' || a === 'ReplaceAndRetain' || a === 'ReplaceAndSnapshot';
    });
}
//# sourceMappingURL=data:application/json;base64,