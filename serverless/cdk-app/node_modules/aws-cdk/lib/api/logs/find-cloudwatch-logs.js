"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findCloudWatchLogGroups = findCloudWatchLogGroups;
const logging_1 = require("../../logging");
const error_1 = require("../../util/error");
const environment_access_1 = require("../environment-access");
const evaluate_cloudformation_template_1 = require("../evaluate-cloudformation-template");
const mode_1 = require("../plugin/mode");
const toolkit_info_1 = require("../toolkit-info");
// resource types that have associated CloudWatch Log Groups that should _not_ be monitored
const IGNORE_LOGS_RESOURCE_TYPES = ['AWS::EC2::FlowLog', 'AWS::CloudTrail::Trail', 'AWS::CodeBuild::Project'];
async function findCloudWatchLogGroups(sdkProvider, stackArtifact) {
    let sdk;
    const resolvedEnv = await sdkProvider.resolveEnvironment(stackArtifact.environment);
    // try to assume the lookup role and fallback to the default credentials
    try {
        sdk = (await new environment_access_1.EnvironmentAccess(sdkProvider, toolkit_info_1.DEFAULT_TOOLKIT_STACK_NAME).accessStackForLookup(stackArtifact)).sdk;
    }
    catch (e) {
        (0, logging_1.debug)(`Failed to access SDK environment: ${(0, error_1.formatErrorMessage)(e)}`);
        sdk = (await sdkProvider.forEnvironment(resolvedEnv, mode_1.Mode.ForReading)).sdk;
    }
    const listStackResources = new evaluate_cloudformation_template_1.LazyListStackResources(sdk, stackArtifact.stackName);
    const evaluateCfnTemplate = new evaluate_cloudformation_template_1.EvaluateCloudFormationTemplate({
        stackName: stackArtifact.stackName,
        template: stackArtifact.template,
        parameters: {},
        account: resolvedEnv.account,
        region: resolvedEnv.region,
        partition: (await sdk.currentAccount()).partition,
        sdk,
    });
    const stackResources = await listStackResources.listStackResources();
    const logGroupNames = findAllLogGroupNames(stackResources, evaluateCfnTemplate);
    return {
        env: resolvedEnv,
        sdk,
        logGroupNames,
    };
}
/**
 * Determine if a CloudWatch Log Group is associated
 * with an ignored resource
 */
function isReferencedFromIgnoredResource(logGroupResource, evaluateCfnTemplate) {
    const resourcesReferencingLogGroup = evaluateCfnTemplate.findReferencesTo(logGroupResource.LogicalResourceId);
    return resourcesReferencingLogGroup.some((reference) => {
        return IGNORE_LOGS_RESOURCE_TYPES.includes(reference.Type);
    });
}
const cloudWatchLogsResolvers = {
    'AWS::Logs::LogGroup': (resource, evaluateCfnTemplate) => {
        if (isReferencedFromIgnoredResource(resource, evaluateCfnTemplate)) {
            return undefined;
        }
        return resource.PhysicalResourceId?.toString();
    },
    // Resource types that will create a CloudWatch log group with a specific name if one is not provided.
    // The keys are CFN resource types, and the values are the name of the physical name property of that resource
    // and the service name that is used in the automatically created CloudWatch log group.
    'AWS::Lambda::Function': (resource, evaluateCfnTemplate) => {
        const loggingConfig = evaluateCfnTemplate.getResourceProperty(resource.LogicalResourceId, 'LoggingConfig');
        if (loggingConfig?.LogGroup) {
            // if LogGroup is a string then use it as the LogGroupName as it is referred by LogGroup.fromLogGroupArn in CDK
            if (typeof loggingConfig.LogGroup === 'string') {
                return loggingConfig.LogGroup;
            }
            // if { Ref: '...' } is used then try to resolve the LogGroupName from the referenced resource in the template
            if (typeof loggingConfig.LogGroup === 'object') {
                if (loggingConfig.LogGroup.Ref) {
                    return evaluateCfnTemplate.getResourceProperty(loggingConfig.LogGroup.Ref, 'LogGroupName');
                }
            }
        }
        return `/aws/lambda/${resource.PhysicalResourceId}`;
    },
};
/**
 * Find all CloudWatch Log Groups in the deployed template.
 * This will find both explicitly created Log Groups (excluding those associated with ignored resources)
 * and Log Groups created implicitly (i.e. Lambda Functions)
 */
function findAllLogGroupNames(stackResources, evaluateCfnTemplate) {
    const logGroupNames = [];
    for (const resource of stackResources) {
        const logGroupResolver = cloudWatchLogsResolvers[resource.ResourceType];
        if (logGroupResolver) {
            const logGroupName = logGroupResolver(resource, evaluateCfnTemplate);
            if (logGroupName) {
                logGroupNames.push(logGroupName);
            }
        }
    }
    return logGroupNames;
}
//# sourceMappingURL=data:application/json;base64,