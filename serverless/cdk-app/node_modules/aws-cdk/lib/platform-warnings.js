"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkForPlatformWarnings = checkForPlatformWarnings;
exports.isVersionBetween = isVersionBetween;
const os = require("os");
const fs = require("fs-extra");
const logging = require("./logging");
async function checkForPlatformWarnings() {
    if (await hasDockerCopyBug()) {
        logging.warning('`cdk synth` may hang in Docker on Linux 5.6-5.10. See https://github.com/aws/aws-cdk/issues/21379 for workarounds.');
    }
}
async function hasDockerCopyBug() {
    return await runningInDocker() && os.platform() === 'linux' && isVersionBetween(os.release(), '5.6', '5.10');
}
async function runningInDocker() {
    return fs.pathExists('/.dockerenv');
}
function isVersionBetween(version, lower, upper) {
    const ver = splitVersion(version);
    const lo = splitVersion(lower);
    const up = splitVersion(upper);
    while (lo.length < ver.length) {
        lo.push(0);
    }
    while (up.length < ver.length) {
        up.push(9999999);
    }
    let n = ver.length;
    for (let i = 0; i < n; i++) {
        if (lo[i] < ver[i] && ver[i] < up[i]) {
            return true;
        }
        if (lo[i] > ver[i] || ver[i] > up[i]) {
            return false;
        }
    }
    return false;
}
function splitVersion(version) {
    return `${version}`.split('.')
        .map(x => parseInt(x, 10))
        .map(x => isNaN(x) ? 0 : x);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0td2FybmluZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJwbGF0Zm9ybS13YXJuaW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUlBLDREQUlDO0FBVUQsNENBZ0JDO0FBbENELHlCQUF5QjtBQUN6QiwrQkFBK0I7QUFDL0IscUNBQXFDO0FBRTlCLEtBQUssVUFBVSx3QkFBd0I7SUFDNUMsSUFBSSxNQUFNLGdCQUFnQixFQUFFLEVBQUUsQ0FBQztRQUM3QixPQUFPLENBQUMsT0FBTyxDQUFDLG9IQUFvSCxDQUFDLENBQUM7SUFDeEksQ0FBQztBQUNILENBQUM7QUFFRCxLQUFLLFVBQVUsZ0JBQWdCO0lBQzdCLE9BQU8sTUFBTSxlQUFlLEVBQUUsSUFBSSxFQUFFLENBQUMsUUFBUSxFQUFFLEtBQUssT0FBTyxJQUFJLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0csQ0FBQztBQUVELEtBQUssVUFBVSxlQUFlO0lBQzVCLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0QyxDQUFDO0FBRUQsU0FBZ0IsZ0JBQWdCLENBQUMsT0FBZSxFQUFFLEtBQWEsRUFBRSxLQUFhO0lBQzVFLE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNsQyxNQUFNLEVBQUUsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsTUFBTSxFQUFFLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBRS9CLE9BQU8sRUFBRSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7UUFBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUMsQ0FBQztJQUM5QyxPQUFPLEVBQUUsQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUFDLENBQUM7SUFFcEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUNuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUM7UUFDM0IsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUFDLE9BQU8sSUFBSSxDQUFDO1FBQUMsQ0FBQztRQUN0RCxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQUMsT0FBTyxLQUFLLENBQUM7UUFBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUVmLENBQUM7QUFFRCxTQUFTLFlBQVksQ0FBQyxPQUFlO0lBQ25DLE9BQU8sR0FBRyxPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDO1NBQzNCLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekIsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgKiBhcyBsb2dnaW5nIGZyb20gJy4vbG9nZ2luZyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjaGVja0ZvclBsYXRmb3JtV2FybmluZ3MoKSB7XG4gIGlmIChhd2FpdCBoYXNEb2NrZXJDb3B5QnVnKCkpIHtcbiAgICBsb2dnaW5nLndhcm5pbmcoJ2BjZGsgc3ludGhgIG1heSBoYW5nIGluIERvY2tlciBvbiBMaW51eCA1LjYtNS4xMC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MvYXdzLWNkay9pc3N1ZXMvMjEzNzkgZm9yIHdvcmthcm91bmRzLicpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhc0RvY2tlckNvcHlCdWcoKSB7XG4gIHJldHVybiBhd2FpdCBydW5uaW5nSW5Eb2NrZXIoKSAmJiBvcy5wbGF0Zm9ybSgpID09PSAnbGludXgnICYmIGlzVmVyc2lvbkJldHdlZW4ob3MucmVsZWFzZSgpLCAnNS42JywgJzUuMTAnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gcnVubmluZ0luRG9ja2VyKCkge1xuICByZXR1cm4gZnMucGF0aEV4aXN0cygnLy5kb2NrZXJlbnYnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmVyc2lvbkJldHdlZW4odmVyc2lvbjogc3RyaW5nLCBsb3dlcjogc3RyaW5nLCB1cHBlcjogc3RyaW5nKSB7XG4gIGNvbnN0IHZlciA9IHNwbGl0VmVyc2lvbih2ZXJzaW9uKTtcbiAgY29uc3QgbG8gPSBzcGxpdFZlcnNpb24obG93ZXIpO1xuICBjb25zdCB1cCA9IHNwbGl0VmVyc2lvbih1cHBlcik7XG5cbiAgd2hpbGUgKGxvLmxlbmd0aCA8IHZlci5sZW5ndGgpIHsgbG8ucHVzaCgwKTsgfVxuICB3aGlsZSAodXAubGVuZ3RoIDwgdmVyLmxlbmd0aCkgeyB1cC5wdXNoKDk5OTk5OTkpOyB9XG5cbiAgbGV0IG4gPSB2ZXIubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGlmIChsb1tpXSA8IHZlcltpXSAmJiB2ZXJbaV0gPCB1cFtpXSkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIGlmIChsb1tpXSA+IHZlcltpXSB8fCB2ZXJbaV0gPiB1cFtpXSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcblxufVxuXG5mdW5jdGlvbiBzcGxpdFZlcnNpb24odmVyc2lvbjogc3RyaW5nKTogbnVtYmVyW10ge1xuICByZXR1cm4gYCR7dmVyc2lvbn1gLnNwbGl0KCcuJylcbiAgICAubWFwKHggPT4gcGFyc2VJbnQoeCwgMTApKVxuICAgIC5tYXAoeCA9PiBpc05hTih4KSA/IDAgOiB4KTtcbn1cbiJdfQ==