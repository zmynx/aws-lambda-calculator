export type IoMessageCodeCategory = 'TOOLKIT' | 'SDK' | 'ASSETS';
export type IoCodeLevel = 'E' | 'W' | 'I';
export type IoMessageSpecificCode<L extends IoCodeLevel> = `CDK_${IoMessageCodeCategory}_${L}${number}${number}${number}${number}`;
export type IoMessageCode = IoMessageSpecificCode<IoCodeLevel>;
/**
 * Basic message structure for toolkit notifications.
 * Messages are emitted by the toolkit and handled by the IoHost.
 */
export interface IoMessage {
    /**
     * The time the message was emitted.
     */
    readonly time: Date;
    /**
     * The log level of the message.
     */
    readonly level: IoMessageLevel;
    /**
     * The action that triggered the message.
     */
    readonly action: ToolkitAction;
    /**
     * A short message code uniquely identifying a message type using the format CDK_[CATEGORY]_[E/W/I][000-999].
     *
     * The level indicator follows these rules:
     * - 'E' for error level messages
     * - 'W' for warning level messages
     * - 'I' for info/debug/trace level messages
     *
     * Codes ending in 000 are generic messages, while codes ending in 001-999 are specific to a particular message.
     * The following are examples of valid and invalid message codes:
     * ```ts
     * 'CDK_ASSETS_I000'       // valid: generic assets info message
     * 'CDK_TOOLKIT_E002'      // valid: specific toolkit error message
     * 'CDK_SDK_W023'          // valid: specific sdk warning message
     * ```
     */
    readonly code: IoMessageCode;
    /**
     * The message text.
     */
    readonly message: string;
    /**
     * If true, the message will be written to stdout
     * regardless of any other parameters.
     *
     * @default false
     */
    readonly forceStdout?: boolean;
}
export type IoMessageLevel = 'error' | 'warn' | 'info' | 'debug' | 'trace';
/**
 * The current action being performed by the CLI. 'none' represents the absence of an action.
 */
export type ToolkitAction = 'synth' | 'list' | 'deploy' | 'destroy' | 'none';
/**
 * A simple IO host for the CLI that writes messages to the console.
 */
export declare class CliIoHost {
    /**
     * Returns the singleton instance
     */
    static getIoHost(): CliIoHost;
    /**
     * Singleton instance of the CliIoHost
     */
    private static instance;
    /**
     * Determines which output stream to use based on log level and configuration.
     */
    private static getStream;
    /**
     * Whether the host should apply chalk styles to messages. Defaults to false if the host is not running in a TTY.
     *
     * @default false
     */
    private isTTY;
    /**
     * Whether the CliIoHost is running in CI mode. In CI mode, all non-error output goes to stdout instead of stderr.
     *
     * Set to false in the CliIoHost constructor it will be overwritten if the CLI CI argument is passed
     */
    private ci;
    /**
     * the current {@link ToolkitAction} set by the CLI.
     */
    private currentAction;
    private constructor();
    static get currentAction(): ToolkitAction | undefined;
    static set currentAction(action: ToolkitAction);
    static get ci(): boolean;
    static set ci(value: boolean);
    static get isTTY(): boolean;
    static set isTTY(value: boolean);
    /**
     * Notifies the host of a message.
     * The caller waits until the notification completes.
     */
    notify(msg: IoMessage): Promise<void>;
    /**
     * Formats a message for console output with optional color support
     */
    private formatMessage;
    /**
     * Formats date to HH:MM:SS
     */
    private formatTime;
}
export declare const styleMap: Record<IoMessageLevel, (str: string) => string>;
