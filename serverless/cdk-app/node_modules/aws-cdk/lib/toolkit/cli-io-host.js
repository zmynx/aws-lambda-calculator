"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.styleMap = exports.CliIoHost = void 0;
const chalk = require("chalk");
/**
 * A simple IO host for the CLI that writes messages to the console.
 */
class CliIoHost {
    /**
     * Returns the singleton instance
     */
    static getIoHost() {
        if (!CliIoHost.instance) {
            CliIoHost.instance = new CliIoHost();
        }
        return CliIoHost.instance;
    }
    /**
     * Determines which output stream to use based on log level and configuration.
     */
    static getStream(level, forceStdout) {
        // For legacy purposes all log streams are written to stderr by default, unless
        // specified otherwise, by passing `forceStdout`, which is used by the `data()` logging function, or
        // if the CDK is running in a CI environment. This is because some CI environments will immediately
        // fail if stderr is written to. In these cases, we detect if we are in a CI environment and
        // write all messages to stdout instead.
        if (forceStdout) {
            return process.stdout;
        }
        if (level == 'error')
            return process.stderr;
        return this.ci ? process.stdout : process.stderr;
    }
    constructor() {
        this.isTTY = process.stdout.isTTY ?? false;
        this.ci = false;
    }
    static get currentAction() {
        return CliIoHost.getIoHost().currentAction;
    }
    static set currentAction(action) {
        CliIoHost.getIoHost().currentAction = action;
    }
    static get ci() {
        return CliIoHost.getIoHost().ci;
    }
    static set ci(value) {
        CliIoHost.getIoHost().ci = value;
    }
    static get isTTY() {
        return CliIoHost.getIoHost().isTTY;
    }
    static set isTTY(value) {
        CliIoHost.getIoHost().isTTY = value;
    }
    /**
     * Notifies the host of a message.
     * The caller waits until the notification completes.
     */
    async notify(msg) {
        const output = this.formatMessage(msg);
        const stream = CliIoHost.getStream(msg.level, msg.forceStdout ?? false);
        return new Promise((resolve, reject) => {
            stream.write(output, (err) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    /**
     * Formats a message for console output with optional color support
     */
    formatMessage(msg) {
        // apply provided style or a default style if we're in TTY mode
        let message_text = this.isTTY
            ? exports.styleMap[msg.level](msg.message)
            : msg.message;
        // prepend timestamp if IoMessageLevel is DEBUG or TRACE. Postpend a newline.
        return ((msg.level === 'debug' || msg.level === 'trace')
            ? `[${this.formatTime(msg.time)}] ${message_text}`
            : message_text) + '\n';
    }
    /**
     * Formats date to HH:MM:SS
     */
    formatTime(d) {
        const pad = (n) => n.toString().padStart(2, '0');
        return `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    }
}
exports.CliIoHost = CliIoHost;
exports.styleMap = {
    error: chalk.red,
    warn: chalk.yellow,
    info: chalk.white,
    debug: chalk.gray,
    trace: chalk.gray,
};
//# sourceMappingURL=data:application/json;base64,