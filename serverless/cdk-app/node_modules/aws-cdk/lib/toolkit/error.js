"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticationError = exports.ToolkitError = void 0;
const TOOLKIT_ERROR_SYMBOL = Symbol.for('@aws-cdk/core.ToolkitError');
const AUTHENTICATION_ERROR_SYMBOL = Symbol.for('@aws-cdk/core.AuthenticationError');
/**
 * Represents a general toolkit error in the AWS CDK Toolkit.
 */
class ToolkitError extends Error {
    /**
     * Determines if a given error is an instance of ToolkitError.
     */
    static isToolkitError(x) {
        return x !== null && typeof (x) === 'object' && TOOLKIT_ERROR_SYMBOL in x;
    }
    /**
     * Determines if a given error is an instance of AuthenticationError.
     */
    static isAuthenticationError(x) {
        return this.isToolkitError(x) && AUTHENTICATION_ERROR_SYMBOL in x;
    }
    constructor(message, type = 'toolkit') {
        super(message);
        Object.setPrototypeOf(this, ToolkitError.prototype);
        Object.defineProperty(this, TOOLKIT_ERROR_SYMBOL, { value: true });
        this.name = new.target.name;
        this.type = type;
    }
}
exports.ToolkitError = ToolkitError;
/**
 * Represents an authentication-specific error in the AWS CDK Toolkit.
 */
class AuthenticationError extends ToolkitError {
    constructor(message) {
        super(message, 'authentication');
        Object.setPrototypeOf(this, AuthenticationError.prototype);
        Object.defineProperty(this, AUTHENTICATION_ERROR_SYMBOL, { value: true });
    }
}
exports.AuthenticationError = AuthenticationError;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxNQUFNLG9CQUFvQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztBQUN0RSxNQUFNLDJCQUEyQixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsbUNBQW1DLENBQUMsQ0FBQztBQUVwRjs7R0FFRztBQUNILE1BQU0sWUFBYSxTQUFRLEtBQUs7SUFDOUI7O09BRUc7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQU07UUFDakMsT0FBTyxDQUFDLEtBQUssSUFBSSxJQUFJLE9BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUksb0JBQW9CLElBQUksQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFNO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSwyQkFBMkIsSUFBSSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQU9ELFlBQVksT0FBZSxFQUFFLE9BQWUsU0FBUztRQUNuRCxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ25CLENBQUM7Q0FDRjtBQWNRLG9DQUFZO0FBWnJCOztHQUVHO0FBQ0gsTUFBTSxtQkFBb0IsU0FBUSxZQUFZO0lBQzVDLFlBQVksT0FBZTtRQUN6QixLQUFLLENBQUMsT0FBTyxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDakMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsMkJBQTJCLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUM1RSxDQUFDO0NBQ0Y7QUFHc0Isa0RBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgVE9PTEtJVF9FUlJPUl9TWU1CT0wgPSBTeW1ib2wuZm9yKCdAYXdzLWNkay9jb3JlLlRvb2xraXRFcnJvcicpO1xuY29uc3QgQVVUSEVOVElDQVRJT05fRVJST1JfU1lNQk9MID0gU3ltYm9sLmZvcignQGF3cy1jZGsvY29yZS5BdXRoZW50aWNhdGlvbkVycm9yJyk7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGdlbmVyYWwgdG9vbGtpdCBlcnJvciBpbiB0aGUgQVdTIENESyBUb29sa2l0LlxuICovXG5jbGFzcyBUb29sa2l0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGEgZ2l2ZW4gZXJyb3IgaXMgYW4gaW5zdGFuY2Ugb2YgVG9vbGtpdEVycm9yLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc1Rvb2xraXRFcnJvcih4OiBhbnkpOiB4IGlzIFRvb2xraXRFcnJvciB7XG4gICAgcmV0dXJuIHggIT09IG51bGwgJiYgdHlwZW9mKHgpID09PSAnb2JqZWN0JyAmJiBUT09MS0lUX0VSUk9SX1NZTUJPTCBpbiB4O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYSBnaXZlbiBlcnJvciBpcyBhbiBpbnN0YW5jZSBvZiBBdXRoZW50aWNhdGlvbkVycm9yLlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0F1dGhlbnRpY2F0aW9uRXJyb3IoeDogYW55KTogeCBpcyBBdXRoZW50aWNhdGlvbkVycm9yIHtcbiAgICByZXR1cm4gdGhpcy5pc1Rvb2xraXRFcnJvcih4KSAmJiBBVVRIRU5USUNBVElPTl9FUlJPUl9TWU1CT0wgaW4geDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgdHlwZSBvZiB0aGUgZXJyb3IsIGRlZmF1bHRzIHRvIFwidG9vbGtpdFwiLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcsIHR5cGU6IHN0cmluZyA9ICd0b29sa2l0Jykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUb29sa2l0RXJyb3IucHJvdG90eXBlKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgVE9PTEtJVF9FUlJPUl9TWU1CT0wsIHsgdmFsdWU6IHRydWUgfSk7XG4gICAgdGhpcy5uYW1lID0gbmV3LnRhcmdldC5uYW1lO1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGF1dGhlbnRpY2F0aW9uLXNwZWNpZmljIGVycm9yIGluIHRoZSBBV1MgQ0RLIFRvb2xraXQuXG4gKi9cbmNsYXNzIEF1dGhlbnRpY2F0aW9uRXJyb3IgZXh0ZW5kcyBUb29sa2l0RXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICBzdXBlcihtZXNzYWdlLCAnYXV0aGVudGljYXRpb24nKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQXV0aGVudGljYXRpb25FcnJvci5wcm90b3R5cGUpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBBVVRIRU5USUNBVElPTl9FUlJPUl9TWU1CT0wsIHsgdmFsdWU6IHRydWUgfSk7XG4gIH1cbn1cblxuLy8gRXhwb3J0IGNsYXNzZXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcbmV4cG9ydCB7IFRvb2xraXRFcnJvciwgQXV0aGVudGljYXRpb25FcnJvciB9O1xuIl19