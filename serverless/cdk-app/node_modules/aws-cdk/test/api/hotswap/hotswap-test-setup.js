"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HotswapMockSdkProvider = exports.STACK_ID = void 0;
exports.setupHotswapTests = setupHotswapTests;
exports.setupHotswapNestedStackTests = setupHotswapNestedStackTests;
exports.cdkStackArtifactOf = cdkStackArtifactOf;
exports.pushStackResourceSummaries = pushStackResourceSummaries;
exports.pushNestedStackResourceSummaries = pushNestedStackResourceSummaries;
exports.setCurrentCfnStackTemplate = setCurrentCfnStackTemplate;
exports.addTemplateToCloudFormationLookupMock = addTemplateToCloudFormationLookupMock;
exports.stackSummaryOf = stackSummaryOf;
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const client_lambda_1 = require("@aws-sdk/client-lambda");
const common_1 = require("../../../lib/api/hotswap/common");
const deployments = require("../../../lib/api/hotswap-deployments");
const cloudformation_1 = require("../../../lib/api/util/cloudformation");
const util_1 = require("../../util");
const mock_sdk_1 = require("../../util/mock-sdk");
const fake_cloudformation_stack_1 = require("../fake-cloudformation-stack");
const STACK_NAME = 'withouterrors';
exports.STACK_ID = 'stackId';
let hotswapMockSdkProvider;
let currentCfnStack;
const currentCfnStackResources = [];
let stackTemplates;
let currentNestedCfnStackResources;
function setupHotswapTests() {
    (0, mock_sdk_1.restoreSdkMocksToDefault)();
    (0, mock_sdk_1.setDefaultSTSMocks)();
    jest.resetAllMocks();
    // clear the array
    currentCfnStackResources.splice(0);
    hotswapMockSdkProvider = new HotswapMockSdkProvider();
    currentCfnStack = new fake_cloudformation_stack_1.FakeCloudformationStack({
        stackName: STACK_NAME,
        stackId: exports.STACK_ID,
    });
    cloudformation_1.CloudFormationStack.lookup = async (_, _stackName) => {
        return currentCfnStack;
    };
    return hotswapMockSdkProvider;
}
function setupHotswapNestedStackTests(rootStackName) {
    (0, mock_sdk_1.restoreSdkMocksToDefault)();
    (0, mock_sdk_1.setDefaultSTSMocks)();
    jest.resetAllMocks();
    currentNestedCfnStackResources = {};
    hotswapMockSdkProvider = new HotswapMockSdkProvider(rootStackName);
    currentCfnStack = new fake_cloudformation_stack_1.FakeCloudformationStack({
        stackName: rootStackName,
        stackId: exports.STACK_ID,
    });
    stackTemplates = {};
    cloudformation_1.CloudFormationStack.lookup = async (_, stackName) => {
        currentCfnStack.template = async () => stackTemplates[stackName];
        return currentCfnStack;
    };
    return hotswapMockSdkProvider;
}
function cdkStackArtifactOf(testStackArtifact = {}) {
    return (0, util_1.testStack)({
        stackName: STACK_NAME,
        ...testStackArtifact,
    });
}
function pushStackResourceSummaries(...items) {
    currentCfnStackResources.push(...items);
}
function pushNestedStackResourceSummaries(stackName, ...items) {
    if (!currentNestedCfnStackResources[stackName]) {
        currentNestedCfnStackResources[stackName] = [];
    }
    currentNestedCfnStackResources[stackName].push(...items);
}
function setCurrentCfnStackTemplate(template) {
    const templateDeepCopy = JSON.parse(JSON.stringify(template)); // deep copy the template, so our tests can mutate one template instead of creating two
    currentCfnStack.setTemplate(templateDeepCopy);
}
function addTemplateToCloudFormationLookupMock(stackArtifact) {
    const templateDeepCopy = JSON.parse(JSON.stringify(stackArtifact.template)); // deep copy the template, so our tests can mutate one template instead of creating two
    stackTemplates[stackArtifact.stackName] = templateDeepCopy;
}
function stackSummaryOf(logicalId, resourceType, physicalResourceId) {
    return {
        LogicalResourceId: logicalId,
        PhysicalResourceId: physicalResourceId,
        ResourceType: resourceType,
        ResourceStatus: client_cloudformation_1.StackStatus.CREATE_COMPLETE,
        LastUpdatedTimestamp: new Date(),
    };
}
class HotswapMockSdkProvider extends mock_sdk_1.MockSdkProvider {
    constructor(rootStackName) {
        super();
        mock_sdk_1.mockLambdaClient.on(client_lambda_1.GetFunctionCommand).resolves({
            Configuration: {
                LastUpdateStatus: 'Successful',
            },
        });
        mock_sdk_1.mockCloudFormationClient.on(client_cloudformation_1.ListStackResourcesCommand).callsFake((input) => {
            if (rootStackName) {
                const knownStackNames = Object.keys(currentNestedCfnStackResources);
                if (input.StackName !== rootStackName && !knownStackNames.includes(input.StackName)) {
                    throw new Error(`Expected Stack name in listStackResources() call to be a member of ['${rootStackName}, ${knownStackNames}'], but received: '${input.StackName}'`);
                }
            }
            else if (input.StackName !== STACK_NAME) {
                throw new Error(`Expected Stack name in listStackResources() call to be: '${STACK_NAME}', but received: '${input.StackName}'`);
            }
            return {
                StackResourceSummaries: rootStackName
                    ? currentNestedCfnStackResources[input.StackName]
                    : currentCfnStackResources,
            };
        });
    }
    tryHotswapDeployment(hotswapMode, stackArtifact, assetParams = {}, hotswapPropertyOverrides) {
        let hotswapProps = hotswapPropertyOverrides || new common_1.HotswapPropertyOverrides();
        return deployments.tryHotswapDeployment(this, assetParams, currentCfnStack, stackArtifact, hotswapMode, hotswapProps);
    }
}
exports.HotswapMockSdkProvider = HotswapMockSdkProvider;
//# sourceMappingURL=data:application/json;base64,