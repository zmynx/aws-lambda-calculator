"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logging_1 = require("../../../lib/logging");
describe('logging', () => {
    let mockStdout;
    let mockStderr;
    const stripAnsi = (str) => {
        const ansiRegex = /\u001b\[[0-9;]*[a-zA-Z]/g;
        return str.replace(ansiRegex, '');
    };
    beforeEach(() => {
        (0, logging_1.setIoMessageThreshold)('info');
        (0, logging_1.setCI)(false);
        mockStdout = jest.fn();
        mockStderr = jest.fn();
        jest.spyOn(process.stdout, 'write').mockImplementation((chunk) => {
            mockStdout(stripAnsi(chunk.toString()));
            return true;
        });
        jest.spyOn(process.stderr, 'write').mockImplementation((chunk) => {
            mockStderr(stripAnsi(chunk.toString()));
            return true;
        });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    describe('stream selection', () => {
        test('data() always writes to stdout with both styles', () => {
            // String style
            (0, logging_1.data)('test message');
            expect(mockStdout).toHaveBeenCalledWith('test message\n');
            // Object style
            (0, logging_1.data)({ message: 'test message 2' });
            expect(mockStdout).toHaveBeenCalledWith('test message 2\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
        test('error() always writes to stderr with both styles', () => {
            // String style
            (0, logging_1.error)('test error');
            expect(mockStderr).toHaveBeenCalledWith('test error\n');
            // Object style
            (0, logging_1.error)({ message: 'test error 2' });
            expect(mockStderr).toHaveBeenCalledWith('test error 2\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('info() writes to stderr by default with both styles', () => {
            // String style
            (0, logging_1.info)('test print');
            expect(mockStderr).toHaveBeenCalledWith('test print\n');
            // Object style
            (0, logging_1.info)({ message: 'test print 2' });
            expect(mockStderr).toHaveBeenCalledWith('test print 2\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('info() writes to stdout in CI mode with both styles', () => {
            (0, logging_1.setCI)(true);
            // String style
            (0, logging_1.info)('test print');
            expect(mockStdout).toHaveBeenCalledWith('test print\n');
            // Object style
            (0, logging_1.info)({ message: 'test print 2' });
            expect(mockStdout).toHaveBeenCalledWith('test print 2\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
    });
    describe('log levels', () => {
        test('respects log level settings with both styles', () => {
            (0, logging_1.setIoMessageThreshold)('error');
            // String style
            (0, logging_1.error)('error message');
            (0, logging_1.warning)('warning message');
            (0, logging_1.info)('print message');
            // Object style
            (0, logging_1.error)({ message: 'error message 2' });
            (0, logging_1.warning)({ message: 'warning message 2' });
            (0, logging_1.info)({ message: 'print message 2' });
            expect(mockStderr).toHaveBeenCalledWith('error message\n');
            expect(mockStderr).toHaveBeenCalledWith('error message 2\n');
            expect(mockStderr).not.toHaveBeenCalledWith('warning message\n');
            expect(mockStderr).not.toHaveBeenCalledWith('warning message 2\n');
            expect(mockStderr).not.toHaveBeenCalledWith('print message\n');
            expect(mockStderr).not.toHaveBeenCalledWith('print message 2\n');
        });
        test('debug messages only show at debug level with both styles', () => {
            (0, logging_1.setIoMessageThreshold)('info');
            (0, logging_1.debug)('debug message');
            (0, logging_1.debug)({ message: 'debug message 2' });
            expect(mockStderr).not.toHaveBeenCalled();
            (0, logging_1.setIoMessageThreshold)('debug');
            (0, logging_1.debug)('debug message');
            (0, logging_1.debug)({ message: 'debug message 2' });
            expect(mockStderr).toHaveBeenCalledWith(expect.stringMatching(/^\[\d{2}:\d{2}:\d{2}\] debug message\n$/));
            expect(mockStderr).toHaveBeenCalledWith(expect.stringMatching(/^\[\d{2}:\d{2}:\d{2}\] debug message 2\n$/));
        });
        test('trace messages only show at trace level with both styles', () => {
            (0, logging_1.setIoMessageThreshold)('debug');
            (0, logging_1.trace)('trace message');
            (0, logging_1.trace)({ message: 'trace message 2' });
            expect(mockStderr).not.toHaveBeenCalled();
            (0, logging_1.setIoMessageThreshold)('trace');
            (0, logging_1.trace)('trace message');
            (0, logging_1.trace)({ message: 'trace message 2' });
            expect(mockStderr).toHaveBeenCalledWith(expect.stringMatching(/^\[\d{2}:\d{2}:\d{2}\] trace message\n$/));
            expect(mockStderr).toHaveBeenCalledWith(expect.stringMatching(/^\[\d{2}:\d{2}:\d{2}\] trace message 2\n$/));
        });
    });
    describe('formatted messages', () => {
        test('handles format strings correctly with both styles', () => {
            // String style
            (0, logging_1.info)('Hello %s, you have %d messages', 'User', 5);
            expect(mockStderr).toHaveBeenCalledWith('Hello User, you have 5 messages\n');
            // Object style
            (0, logging_1.info)({ message: 'Hello %s, you have %d messages' }, 'User', 5);
            expect(mockStderr).toHaveBeenCalledWith('Hello User, you have 5 messages\n');
        });
        test('handles objects in format strings with both styles', () => {
            const obj = { name: 'test' };
            // String style
            (0, logging_1.info)('Object: %j', obj);
            expect(mockStderr).toHaveBeenCalledWith('Object: {"name":"test"}\n');
            // Object style
            (0, logging_1.info)({ message: 'Object: %j' }, obj);
            expect(mockStderr).toHaveBeenCalledWith('Object: {"name":"test"}\n');
        });
        test('handles multiple style changes in single call', () => {
            const obj = { id: 123 };
            (0, logging_1.success)('Processing %s: %j at %d%%', 'task', obj, 50);
            expect(mockStderr).toHaveBeenCalledWith('Processing task: {"id":123} at 50%\n');
        });
    });
    describe('styled output', () => {
        test('success() adds green color to output with both styles', () => {
            // String style
            (0, logging_1.success)('operation completed');
            expect(mockStderr).toHaveBeenCalledWith('operation completed\n');
            // Object style
            (0, logging_1.success)({ message: 'operation completed 2' });
            expect(mockStderr).toHaveBeenCalledWith('operation completed 2\n');
        });
        test('highlight() adds bold formatting to output with both styles', () => {
            // String style
            (0, logging_1.highlight)('important message');
            expect(mockStderr).toHaveBeenCalledWith('important message\n');
            // Object style
            (0, logging_1.highlight)({ message: 'important message 2' });
            expect(mockStderr).toHaveBeenCalledWith('important message 2\n');
        });
        test('success handles format strings with styling', () => {
            (0, logging_1.success)('completed task %d of %d', 1, 3);
            expect(mockStderr).toHaveBeenCalledWith('completed task 1 of 3\n');
            // Remove the code from the test since it's an implementation detail
            (0, logging_1.success)({ message: 'completed task %d of %d' }, 2, 3);
            expect(mockStderr).toHaveBeenCalledWith('completed task 2 of 3\n');
        });
        test('highlight handles complex objects with styling', () => {
            const complexObj = { status: 'active', count: 42 };
            (0, logging_1.highlight)('Status: %j', complexObj);
            expect(mockStderr).toHaveBeenCalledWith('Status: {"status":"active","count":42}\n');
            // Remove the code from the test since it's an implementation detail
            (0, logging_1.highlight)({ message: 'Status: %j' }, complexObj);
            expect(mockStderr).toHaveBeenCalledWith('Status: {"status":"active","count":42}\n');
        });
    });
    describe('edge cases', () => {
        test('handles null and undefined arguments with both styles', () => {
            // String style
            (0, logging_1.info)('Values: %s, %s', null, undefined);
            expect(mockStderr).toHaveBeenCalledWith('Values: null, undefined\n');
            // Object style
            (0, logging_1.info)({ message: 'Values: %s, %s' }, null, undefined);
            expect(mockStderr).toHaveBeenCalledWith('Values: null, undefined\n');
        });
        test('handles circular references in objects with both styles', () => {
            const obj = { name: 'test' };
            obj.self = obj;
            // String style
            (0, logging_1.info)('Object: %j', obj);
            expect(mockStderr).toHaveBeenCalledWith(expect.stringContaining('[Circular'));
            // Object style
            (0, logging_1.info)({ message: 'Object: %j' }, obj);
            expect(mockStderr).toHaveBeenCalledWith(expect.stringContaining('[Circular'));
        });
    });
    describe('message codes', () => {
        test('validates message codes correctly', () => {
            // Valid codes
            expect(() => (0, logging_1.error)({ message: 'test', code: 'CDK_TOOLKIT_E0001' })).not.toThrow();
            expect(() => (0, logging_1.warning)({ message: 'test', code: 'CDK_ASSETS_W4999' })).not.toThrow();
            expect(() => (0, logging_1.info)({ message: 'test', code: 'CDK_SDK_I0000' })).not.toThrow();
        });
        test('uses default codes when none provided', () => {
            (0, logging_1.error)('test error');
            expect(mockStderr).toHaveBeenCalledWith(expect.stringContaining('test error'));
            // Would need to modify the code to expose the actual message code for verification
        });
    });
    describe('corked logging', () => {
        test('buffers messages when corked', async () => {
            await (0, logging_1.withCorkedLogging)(async () => {
                (0, logging_1.info)('message 1');
                (0, logging_1.info)({ message: 'message 2' });
                expect(mockStderr).not.toHaveBeenCalled();
            });
            expect(mockStderr).toHaveBeenCalledWith('message 1\n');
            expect(mockStderr).toHaveBeenCalledWith('message 2\n');
        });
        test('handles nested corking correctly', async () => {
            await (0, logging_1.withCorkedLogging)(async () => {
                (0, logging_1.info)('outer 1');
                await (0, logging_1.withCorkedLogging)(async () => {
                    (0, logging_1.info)({ message: 'inner' });
                });
                (0, logging_1.info)({ message: 'outer 2' });
                expect(mockStderr).not.toHaveBeenCalled();
            });
            expect(mockStderr).toHaveBeenCalledTimes(3);
            expect(mockStderr).toHaveBeenCalledWith('outer 1\n');
            expect(mockStderr).toHaveBeenCalledWith('inner\n');
            expect(mockStderr).toHaveBeenCalledWith('outer 2\n');
        });
        test('handles errors in corked block while preserving buffer', async () => {
            await expect((0, logging_1.withCorkedLogging)(async () => {
                (0, logging_1.info)('message 1');
                throw new Error('test error');
            })).rejects.toThrow('test error');
            // The buffered message should still be printed even if the block throws
            expect(mockStderr).toHaveBeenCalledWith('message 1\n');
        });
        test('maintains correct order with mixed log levels in corked block', async () => {
            // Set threshold to debug to allow debug messages
            (0, logging_1.setIoMessageThreshold)('debug');
            await (0, logging_1.withCorkedLogging)(async () => {
                (0, logging_1.error)('error message');
                (0, logging_1.warning)('warning message');
                (0, logging_1.success)('success message');
                (0, logging_1.debug)('debug message');
            });
            const calls = mockStderr.mock.calls.map(call => call[0]);
            expect(calls).toEqual([
                'error message\n',
                'warning message\n',
                'success message\n',
                expect.stringMatching(/^\[\d{2}:\d{2}:\d{2}\] debug message\n$/),
            ]);
            // Reset threshold back to info for other tests
            (0, logging_1.setIoMessageThreshold)('info');
        });
    });
    describe('CI mode behavior', () => {
        test('correctly switches between stdout and stderr based on CI mode', () => {
            (0, logging_1.setCI)(true);
            (0, logging_1.warning)('warning in CI');
            (0, logging_1.success)('success in CI');
            (0, logging_1.error)('error in CI');
            expect(mockStdout).toHaveBeenCalledWith('warning in CI\n');
            expect(mockStdout).toHaveBeenCalledWith('success in CI\n');
            expect(mockStderr).toHaveBeenCalledWith('error in CI\n');
            (0, logging_1.setCI)(false);
            (0, logging_1.warning)('warning not in CI');
            (0, logging_1.success)('success not in CI');
            (0, logging_1.error)('error not in CI');
            expect(mockStderr).toHaveBeenCalledWith('warning not in CI\n');
            expect(mockStderr).toHaveBeenCalledWith('success not in CI\n');
            expect(mockStderr).toHaveBeenCalledWith('error not in CI\n');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,