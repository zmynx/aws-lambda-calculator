"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_cloudwatch_logs_1 = require("@aws-sdk/client-cloudwatch-logs");
const logs_monitor_1 = require("../../../lib/api/logs/logs-monitor");
const util_1 = require("../../util");
const mock_sdk_1 = require("../../util/mock-sdk");
// Helper function to strip ANSI codes
const stripAnsi = (str) => {
    const ansiRegex = /\u001b\[[0-9;]*[a-zA-Z]/g;
    return str.replace(ansiRegex, '');
};
let sdk;
let stderrMock;
let monitor;
beforeEach(() => {
    monitor = new logs_monitor_1.CloudWatchLogEventMonitor(new Date(T100));
    stderrMock = jest.spyOn(process.stderr, 'write').mockImplementation((chunk) => {
        // Strip ANSI codes when capturing output
        if (typeof chunk === 'string') {
            return stripAnsi(chunk);
        }
        return stripAnsi(chunk.toString());
    });
    sdk = new mock_sdk_1.MockSdk();
});
afterEach(() => {
    stderrMock.mockRestore();
    monitor.deactivate();
});
test('process events', async () => {
    // GIVEN
    const eventDate = new Date(T0 + 102 * 1000);
    mock_sdk_1.mockCloudWatchClient.on(client_cloudwatch_logs_1.FilterLogEventsCommand).resolves({
        events: [event(102, 'message', eventDate)],
    });
    monitor.addLogGroups({
        name: 'name',
        account: '11111111111',
        region: 'us-east-1',
    }, sdk, ['loggroup']);
    // WHEN
    monitor.activate();
    // need time for the log processing to occur
    await (0, util_1.sleep)(1000);
    // THEN
    const expectedLocaleTimeString = eventDate.toLocaleTimeString();
    expect(stderrMock).toHaveBeenCalledTimes(1);
    expect(stripAnsi(stderrMock.mock.calls[0][0])).toContain(`[loggroup] ${expectedLocaleTimeString} message`);
});
test('process truncated events', async () => {
    // GIVEN
    const eventDate = new Date(T0 + 102 * 1000);
    const events = [];
    for (let i = 0; i < 100; i++) {
        events.push(event(102 + i, 'message' + i, eventDate));
    }
    mock_sdk_1.mockCloudWatchClient.on(client_cloudwatch_logs_1.FilterLogEventsCommand).resolves({
        events,
        nextToken: 'some-token',
    });
    monitor.addLogGroups({
        name: 'name',
        account: '11111111111',
        region: 'us-east-1',
    }, sdk, ['loggroup']);
    // WHEN
    monitor.activate();
    // need time for the log processing to occur
    await (0, util_1.sleep)(1000);
    // THEN
    const expectedLocaleTimeString = eventDate.toLocaleTimeString();
    expect(stderrMock).toHaveBeenCalledTimes(101);
    expect(stripAnsi(stderrMock.mock.calls[0][0])).toContain(`[loggroup] ${expectedLocaleTimeString} message0`);
    expect(stripAnsi(stderrMock.mock.calls[100][0])).toContain(`[loggroup] ${expectedLocaleTimeString} >>> \`watch\` shows only the first 100 log messages - the rest have been truncated...`);
});
const T0 = 1597837230504;
const T100 = T0 + 100 * 1000;
function event(nr, message, timestamp) {
    return {
        eventId: `${nr}`,
        message,
        timestamp: timestamp.getTime(),
        ingestionTime: timestamp.getTime(),
    };
}
//# sourceMappingURL=data:application/json;base64,