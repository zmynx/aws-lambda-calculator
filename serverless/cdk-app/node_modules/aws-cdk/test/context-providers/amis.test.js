"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("aws-sdk-client-mock");
const client_ec2_1 = require("@aws-sdk/client-ec2");
const lib_1 = require("../../lib");
const ami_1 = require("../../lib/context-providers/ami");
const mock_sdk_1 = require("../util/mock-sdk");
const mockSDK = new (class extends mock_sdk_1.MockSdkProvider {
    forEnvironment() {
        return Promise.resolve({ sdk: new lib_1.SDK(mock_sdk_1.FAKE_CREDENTIAL_CHAIN, mockSDK.defaultRegion, {}), didAssumeRole: false });
    }
})();
test('calls DescribeImages on the request', async () => {
    // GIVEN
    mock_sdk_1.mockEC2Client.on(client_ec2_1.DescribeImagesCommand).resolves({
        Images: [{ ImageId: 'ami-1234' }],
    });
    // WHEN
    await new ami_1.AmiContextProviderPlugin(mockSDK).getValue({
        account: '1234',
        region: 'asdf',
        owners: ['some-owner'],
        filters: {
            'some-filter': ['filtered'],
        },
    });
    // THEN
    expect(mock_sdk_1.mockEC2Client).toHaveReceivedCommandWith(client_ec2_1.DescribeImagesCommand, {
        Owners: ['some-owner'],
        Filters: [
            {
                Name: 'some-filter',
                Values: ['filtered'],
            },
        ],
    });
});
test('returns the most recent AMI matching the criteria', async () => {
    // GIVEN
    mock_sdk_1.mockEC2Client.on(client_ec2_1.DescribeImagesCommand).resolves({
        Images: [
            {
                ImageId: 'ami-1234',
                CreationDate: '2016-06-22T08:39:59.000Z',
            },
            {
                ImageId: 'ami-5678',
                CreationDate: '2019-06-22T08:39:59.000Z',
            },
        ],
    });
    // WHEN
    const result = await new ami_1.AmiContextProviderPlugin(mockSDK).getValue({
        account: '1234',
        region: 'asdf',
        filters: {},
    });
    // THEN
    expect(result).toBe('ami-5678');
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1pcy50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYW1pcy50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0JBQTZCO0FBQzdCLG9EQUE0RDtBQUM1RCxtQ0FBbUQ7QUFDbkQseURBQTJFO0FBQzNFLCtDQUF5RjtBQUV6RixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBTSxTQUFRLDBCQUFlO0lBQ3pDLGNBQWM7UUFDbkIsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLElBQUksU0FBRyxDQUFDLGdDQUFxQixFQUFFLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLEVBQUUsYUFBYSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbkgsQ0FBQztDQUNGLENBQUMsRUFBRSxDQUFDO0FBRUwsSUFBSSxDQUFDLHFDQUFxQyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3JELFFBQVE7SUFDUix3QkFBYSxDQUFDLEVBQUUsQ0FBQyxrQ0FBcUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUMvQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQztLQUNsQyxDQUFDLENBQUM7SUFFSCxPQUFPO0lBQ1AsTUFBTSxJQUFJLDhCQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQztRQUNuRCxPQUFPLEVBQUUsTUFBTTtRQUNmLE1BQU0sRUFBRSxNQUFNO1FBQ2QsTUFBTSxFQUFFLENBQUMsWUFBWSxDQUFDO1FBQ3RCLE9BQU8sRUFBRTtZQUNQLGFBQWEsRUFBRSxDQUFDLFVBQVUsQ0FBQztTQUM1QjtLQUNGLENBQUMsQ0FBQztJQUVILE9BQU87SUFDUCxNQUFNLENBQUMsd0JBQWEsQ0FBQyxDQUFDLHlCQUF5QixDQUFDLGtDQUFxQixFQUFFO1FBQ3JFLE1BQU0sRUFBRSxDQUFDLFlBQVksQ0FBQztRQUN0QixPQUFPLEVBQUU7WUFDUDtnQkFDRSxJQUFJLEVBQUUsYUFBYTtnQkFDbkIsTUFBTSxFQUFFLENBQUMsVUFBVSxDQUFDO2FBQ3JCO1NBQ0Y7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxtREFBbUQsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNuRSxRQUFRO0lBQ1Isd0JBQWEsQ0FBQyxFQUFFLENBQUMsa0NBQXFCLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDL0MsTUFBTSxFQUFFO1lBQ047Z0JBQ0UsT0FBTyxFQUFFLFVBQVU7Z0JBQ25CLFlBQVksRUFBRSwwQkFBMEI7YUFDekM7WUFDRDtnQkFDRSxPQUFPLEVBQUUsVUFBVTtnQkFDbkIsWUFBWSxFQUFFLDBCQUEwQjthQUN6QztTQUNGO0tBQ0YsQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSw4QkFBd0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFDbEUsT0FBTyxFQUFFLE1BQU07UUFDZixNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRSxFQUFFO0tBQ1osQ0FBQyxDQUFDO0lBRUgsT0FBTztJQUNQLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbEMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2F3cy1zZGstY2xpZW50LW1vY2snO1xuaW1wb3J0IHsgRGVzY3JpYmVJbWFnZXNDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWVjMic7XG5pbXBvcnQgeyBTREssIFNka0ZvckVudmlyb25tZW50IH0gZnJvbSAnLi4vLi4vbGliJztcbmltcG9ydCB7IEFtaUNvbnRleHRQcm92aWRlclBsdWdpbiB9IGZyb20gJy4uLy4uL2xpYi9jb250ZXh0LXByb3ZpZGVycy9hbWknO1xuaW1wb3J0IHsgRkFLRV9DUkVERU5USUFMX0NIQUlOLCBNb2NrU2RrUHJvdmlkZXIsIG1vY2tFQzJDbGllbnQgfSBmcm9tICcuLi91dGlsL21vY2stc2RrJztcblxuY29uc3QgbW9ja1NESyA9IG5ldyAoY2xhc3MgZXh0ZW5kcyBNb2NrU2RrUHJvdmlkZXIge1xuICBwdWJsaWMgZm9yRW52aXJvbm1lbnQoKTogUHJvbWlzZTxTZGtGb3JFbnZpcm9ubWVudD4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBzZGs6IG5ldyBTREsoRkFLRV9DUkVERU5USUFMX0NIQUlOLCBtb2NrU0RLLmRlZmF1bHRSZWdpb24sIHt9KSwgZGlkQXNzdW1lUm9sZTogZmFsc2UgfSk7XG4gIH1cbn0pKCk7XG5cbnRlc3QoJ2NhbGxzIERlc2NyaWJlSW1hZ2VzIG9uIHRoZSByZXF1ZXN0JywgYXN5bmMgKCkgPT4ge1xuICAvLyBHSVZFTlxuICBtb2NrRUMyQ2xpZW50Lm9uKERlc2NyaWJlSW1hZ2VzQ29tbWFuZCkucmVzb2x2ZXMoe1xuICAgIEltYWdlczogW3sgSW1hZ2VJZDogJ2FtaS0xMjM0JyB9XSxcbiAgfSk7XG5cbiAgLy8gV0hFTlxuICBhd2FpdCBuZXcgQW1pQ29udGV4dFByb3ZpZGVyUGx1Z2luKG1vY2tTREspLmdldFZhbHVlKHtcbiAgICBhY2NvdW50OiAnMTIzNCcsXG4gICAgcmVnaW9uOiAnYXNkZicsXG4gICAgb3duZXJzOiBbJ3NvbWUtb3duZXInXSxcbiAgICBmaWx0ZXJzOiB7XG4gICAgICAnc29tZS1maWx0ZXInOiBbJ2ZpbHRlcmVkJ10sXG4gICAgfSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QobW9ja0VDMkNsaWVudCkudG9IYXZlUmVjZWl2ZWRDb21tYW5kV2l0aChEZXNjcmliZUltYWdlc0NvbW1hbmQsIHtcbiAgICBPd25lcnM6IFsnc29tZS1vd25lciddLFxuICAgIEZpbHRlcnM6IFtcbiAgICAgIHtcbiAgICAgICAgTmFtZTogJ3NvbWUtZmlsdGVyJyxcbiAgICAgICAgVmFsdWVzOiBbJ2ZpbHRlcmVkJ10sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xufSk7XG5cbnRlc3QoJ3JldHVybnMgdGhlIG1vc3QgcmVjZW50IEFNSSBtYXRjaGluZyB0aGUgY3JpdGVyaWEnLCBhc3luYyAoKSA9PiB7XG4gIC8vIEdJVkVOXG4gIG1vY2tFQzJDbGllbnQub24oRGVzY3JpYmVJbWFnZXNDb21tYW5kKS5yZXNvbHZlcyh7XG4gICAgSW1hZ2VzOiBbXG4gICAgICB7XG4gICAgICAgIEltYWdlSWQ6ICdhbWktMTIzNCcsXG4gICAgICAgIENyZWF0aW9uRGF0ZTogJzIwMTYtMDYtMjJUMDg6Mzk6NTkuMDAwWicsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBJbWFnZUlkOiAnYW1pLTU2NzgnLFxuICAgICAgICBDcmVhdGlvbkRhdGU6ICcyMDE5LTA2LTIyVDA4OjM5OjU5LjAwMFonLFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcblxuICAvLyBXSEVOXG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5ldyBBbWlDb250ZXh0UHJvdmlkZXJQbHVnaW4obW9ja1NESykuZ2V0VmFsdWUoe1xuICAgIGFjY291bnQ6ICcxMjM0JyxcbiAgICByZWdpb246ICdhc2RmJyxcbiAgICBmaWx0ZXJzOiB7fSxcbiAgfSk7XG5cbiAgLy8gVEhFTlxuICBleHBlY3QocmVzdWx0KS50b0JlKCdhbWktNTY3OCcpO1xufSk7XG4iXX0=