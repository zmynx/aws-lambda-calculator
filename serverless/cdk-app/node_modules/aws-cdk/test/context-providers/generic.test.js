"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable import/order */
const plugin_1 = require("../../lib/api/plugin");
const contextproviders = require("../../lib/context-providers");
const settings_1 = require("../../lib/settings");
const mock_sdk_1 = require("../util/mock-sdk");
const mockSDK = new mock_sdk_1.MockSdkProvider();
(0, mock_sdk_1.setDefaultSTSMocks)();
const TEST_PROVIDER = 'testprovider';
const PLUGIN_PROVIDER = 'plugin';
test('errors are reported into the context value', async () => {
    // GIVEN
    contextproviders.registerContextProvider(TEST_PROVIDER, {
        async getValue(_) {
            throw new Error('Something went wrong');
        },
    });
    const context = new settings_1.Context();
    // WHEN
    await contextproviders.provideContextValues([
        { key: 'asdf', props: { account: '1234', region: 'us-east-1' }, provider: TEST_PROVIDER },
    ], context, mockSDK);
    // THEN - error is now in context
    // NOTE: error key is inlined here because it's part of the CX-API
    // compatibility surface.
    expect(context.get('asdf').$providerError).toBe('Something went wrong');
});
test('lookup role ARN is resolved', async () => {
    // GIVEN
    contextproviders.registerContextProvider(TEST_PROVIDER, {
        async getValue(args) {
            if (args.lookupRoleArn == null) {
                throw new Error('No lookupRoleArn');
            }
            if (args.lookupRoleArn.includes('${AWS::Partition}')) {
                throw new Error('Partition not resolved');
            }
            return 'some resolved value';
        },
    });
    const context = new settings_1.Context();
    // WHEN
    await contextproviders.provideContextValues([
        {
            key: 'asdf',
            props: {
                account: '1234',
                region: 'us-east-1',
                lookupRoleArn: 'arn:${AWS::Partition}:iam::280619947791:role/cdk-hnb659fds-lookup-role-280619947791-us-east-1',
            },
            provider: TEST_PROVIDER,
        },
    ], context, mockSDK);
    // THEN - Value gets resolved
    expect(context.get('asdf')).toEqual('some resolved value');
});
test('errors are marked transient', async () => {
    // GIVEN
    contextproviders.registerContextProvider(TEST_PROVIDER, {
        async getValue(_) {
            throw new Error('Something went wrong');
        },
    });
    const context = new settings_1.Context();
    // WHEN
    await contextproviders.provideContextValues([
        { key: 'asdf', props: { account: '1234', region: 'us-east-1' }, provider: TEST_PROVIDER },
    ], context, mockSDK);
    // THEN - error is marked transient
    expect(context.get('asdf')[settings_1.TRANSIENT_CONTEXT_KEY]).toBeTruthy();
});
test('context provider can be registered using PluginHost', async () => {
    let called = false;
    // GIVEN
    plugin_1.PluginHost.instance.registerContextProviderAlpha('prov', {
        async getValue(_) {
            called = true;
            return '';
        },
    });
    const context = new settings_1.Context();
    // WHEN
    await contextproviders.provideContextValues([
        { key: 'asdf', props: { account: '1234', region: 'us-east-1', pluginName: 'prov' }, provider: PLUGIN_PROVIDER },
    ], context, mockSDK);
    // THEN - error is marked transient
    expect(called).toEqual(true);
});
test('plugin context provider can be called without account/region', async () => {
    // GIVEN
    plugin_1.PluginHost.instance.registerContextProviderAlpha('prov', {
        async getValue(_) {
            return 'yay';
        },
    });
    const context = new settings_1.Context();
    // WHEN
    await contextproviders.provideContextValues([
        { key: 'asdf', props: { banana: 'yellow', pluginName: 'prov' }, provider: PLUGIN_PROVIDER },
    ], context, mockSDK);
    // THEN - error is marked transient
    expect(context.get('asdf')).toEqual('yay');
});
//# sourceMappingURL=data:application/json;base64,