"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_kms_1 = require("@aws-sdk/client-kms");
const keys_1 = require("../../lib/context-providers/keys");
const mock_sdk_1 = require("../util/mock-sdk");
let provider;
beforeEach(() => {
    provider = new keys_1.KeyContextProviderPlugin(new mock_sdk_1.MockSdkProvider());
    (0, mock_sdk_1.restoreSdkMocksToDefault)();
});
test('looks up the requested Key - single result', async () => {
    // GIVEN
    mock_sdk_1.mockKMSClient.on(client_kms_1.ListAliasesCommand).resolves({
        Aliases: [
            {
                AliasName: 'alias/foo',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789000',
            },
        ],
    });
    // WHEN
    const result = await provider.getValue({
        account: '123456789012',
        region: 'us-east-1',
        aliasName: 'alias/foo',
    });
    // THEN
    expect(result).toEqual({
        keyId: '1234abcd-12ab-34cd-56ef-123456789000',
    });
});
test('looks up the requested Key - multiple results', async () => {
    // GIVEN
    mock_sdk_1.mockKMSClient.on(client_kms_1.ListAliasesCommand).resolves({
        Aliases: [
            {
                AliasName: 'alias/bar',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789000',
            },
            {
                AliasName: 'alias/foo',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789001',
            },
            {
                AliasName: 'alias/fooBar',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789002',
            },
        ],
    });
    // WHEN
    const result = await provider.getValue({
        account: '123456789012',
        region: 'us-east-1',
        aliasName: 'alias/foo',
    });
    // THEN
    expect(result).toEqual({
        keyId: '1234abcd-12ab-34cd-56ef-123456789001',
    });
});
test('looks up the requested Key - multiple results with pagination', async () => {
    // GIVEN
    mock_sdk_1.mockKMSClient
        .on(client_kms_1.ListAliasesCommand)
        .resolvesOnce({
        NextMarker: 'nextMarker',
        Truncated: true,
        Aliases: [
            {
                AliasName: 'alias/key1',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789000',
            },
            {
                AliasName: 'alias/key2',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789001',
            },
            {
                AliasName: 'alias/key3',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789002',
            },
        ],
    })
        .resolvesOnce({
        Aliases: [
            {
                AliasName: 'alias/key4',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789003',
            },
            {
                AliasName: 'alias/foo',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789004',
            },
            {
                AliasName: 'alias/key5',
                TargetKeyId: '1234abcd-12ab-34cd-56ef-123456789005',
            },
        ],
    });
    // WHEN
    const result = await provider.getValue({
        account: '123456789012',
        region: 'us-east-1',
        aliasName: 'alias/foo',
    });
    // THEN
    expect(result).toEqual({
        keyId: '1234abcd-12ab-34cd-56ef-123456789004',
    });
});
test('throw exception - no key found', async () => {
    // GIVEN
    mock_sdk_1.mockKMSClient.on(client_kms_1.ListAliasesCommand).resolves({
        Aliases: [],
    });
    // WHEN
    await expect(provider.getValue({
        account: '123456789012',
        region: 'us-east-1',
        aliasName: 'alias/foo',
    })).rejects.toThrow(/Could not find any key with alias named/);
});
test('don\'t throw exception - no key found but ignoreErrorOnMissingContext is true', async () => {
    mock_sdk_1.mockKMSClient.on(client_kms_1.ListAliasesCommand).callsFake((params) => {
        expect(params.KeyId).toBeUndefined();
        return {};
    });
    // WHEN
    const args = {
        account: '123456789012',
        region: 'us-east-1',
        aliasName: 'alias/foo',
        dummyValue: {
            keyId: '1234abcd-12ab-34cd-56ef-1234567890ab',
        },
        ignoreErrorOnMissingContext: true,
    };
    const result = await provider.getValue(args);
    // THEN
    expect(result).toEqual({
        keyId: '1234abcd-12ab-34cd-56ef-1234567890ab',
    });
});
//# sourceMappingURL=data:application/json;base64,