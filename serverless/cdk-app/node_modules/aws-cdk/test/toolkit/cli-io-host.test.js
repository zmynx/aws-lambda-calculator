"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const cli_io_host_1 = require("../../lib/toolkit/cli-io-host");
describe('CliIoHost', () => {
    let mockStdout;
    let mockStderr;
    let defaultMessage;
    beforeEach(() => {
        mockStdout = jest.fn();
        mockStderr = jest.fn();
        // Reset singleton state
        cli_io_host_1.CliIoHost.isTTY = process.stdout.isTTY ?? false;
        cli_io_host_1.CliIoHost.ci = false;
        cli_io_host_1.CliIoHost.currentAction = 'none';
        defaultMessage = {
            time: new Date('2024-01-01T12:00:00'),
            level: 'info',
            action: 'synth',
            code: 'CDK_TOOLKIT_I0001',
            message: 'test message',
        };
        jest.spyOn(process.stdout, 'write').mockImplementation((str, encoding, cb) => {
            mockStdout(str.toString());
            const callback = typeof encoding === 'function' ? encoding : cb;
            if (callback)
                callback();
            return true;
        });
        jest.spyOn(process.stderr, 'write').mockImplementation((str, encoding, cb) => {
            mockStderr(str.toString());
            const callback = typeof encoding === 'function' ? encoding : cb;
            if (callback)
                callback();
            return true;
        });
    });
    afterEach(() => {
        jest.restoreAllMocks();
    });
    describe('stream selection', () => {
        test('writes to stderr by default for non-error messages in non-CI mode', async () => {
            cli_io_host_1.CliIoHost.isTTY = true;
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'CDK_TOOLKIT_I0001',
                message: 'test message',
            });
            expect(mockStderr).toHaveBeenCalledWith(chalk.white('test message') + '\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('writes to stderr for error level with red color', async () => {
            cli_io_host_1.CliIoHost.isTTY = true;
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                time: new Date(),
                level: 'error',
                action: 'synth',
                code: 'CDK_TOOLKIT_E0001',
                message: 'error message',
            });
            expect(mockStderr).toHaveBeenCalledWith(chalk.red('error message') + '\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
        test('writes to stdout when forceStdout is true', async () => {
            cli_io_host_1.CliIoHost.isTTY = true;
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'CDK_TOOLKIT_I0001',
                message: 'forced message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('forced message') + '\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
    });
    describe('message formatting', () => {
        beforeEach(() => {
            cli_io_host_1.CliIoHost.isTTY = true;
        });
        test('formats debug messages with timestamp', async () => {
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                ...defaultMessage,
                level: 'debug',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(`[12:00:00] ${chalk.gray('test message')}\n`);
        });
        test('formats trace messages with timestamp', async () => {
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                ...defaultMessage,
                level: 'trace',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(`[12:00:00] ${chalk.gray('test message')}\n`);
        });
        test('applies no styling when TTY is false', async () => {
            cli_io_host_1.CliIoHost.isTTY = false;
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                ...defaultMessage,
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith('test message\n');
        });
        test('applies correct color styles for different message levels', async () => {
            const testCases = [
                { level: 'error', style: chalk.red },
                { level: 'warn', style: chalk.yellow },
                { level: 'info', style: chalk.white },
                { level: 'debug', style: chalk.gray },
                { level: 'trace', style: chalk.gray },
            ];
            for (const { level, style } of testCases) {
                await cli_io_host_1.CliIoHost.getIoHost().notify({
                    ...defaultMessage,
                    level,
                    forceStdout: true,
                });
                const expectedOutput = level === 'debug' || level === 'trace'
                    ? `[12:00:00] ${style('test message')}\n`
                    : `${style('test message')}\n`;
                expect(mockStdout).toHaveBeenCalledWith(expectedOutput);
                mockStdout.mockClear();
            }
        });
    });
    describe('action handling', () => {
        test('sets and gets current action', () => {
            cli_io_host_1.CliIoHost.currentAction = 'deploy';
            expect(cli_io_host_1.CliIoHost.currentAction).toBe('deploy');
        });
    });
    describe('CI mode behavior', () => {
        beforeEach(() => {
            cli_io_host_1.CliIoHost.isTTY = true;
            cli_io_host_1.CliIoHost.ci = true;
        });
        test('writes to stdout in CI mode when level is not error', async () => {
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'CDK_TOOLKIT_W0001',
                message: 'ci message',
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('ci message') + '\n');
            expect(mockStderr).not.toHaveBeenCalled();
        });
        test('writes to stderr for error level in CI mode', async () => {
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                time: new Date(),
                level: 'error',
                action: 'synth',
                code: 'CDK_TOOLKIT_E0001',
                message: 'ci error message',
            });
            expect(mockStderr).toHaveBeenCalledWith(chalk.red('ci error message') + '\n');
            expect(mockStdout).not.toHaveBeenCalled();
        });
    });
    describe('timestamp handling', () => {
        beforeEach(() => {
            cli_io_host_1.CliIoHost.isTTY = true;
        });
        test('includes timestamp for DEBUG level with gray color', async () => {
            const testDate = new Date('2024-01-01T12:34:56');
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                time: testDate,
                level: 'debug',
                action: 'synth',
                code: 'CDK_TOOLKIT_I0001',
                message: 'debug message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(`[12:34:56] ${chalk.gray('debug message')}\n`);
        });
        test('excludes timestamp for other levels but includes color', async () => {
            const testDate = new Date('2024-01-01T12:34:56');
            await cli_io_host_1.CliIoHost.getIoHost().notify({
                time: testDate,
                level: 'info',
                action: 'synth',
                code: 'CDK_TOOLKIT_I0001',
                message: 'info message',
                forceStdout: true,
            });
            expect(mockStdout).toHaveBeenCalledWith(chalk.white('info message') + '\n');
        });
    });
    describe('error handling', () => {
        test('rejects on write error', async () => {
            jest.spyOn(process.stdout, 'write').mockImplementation((_, callback) => {
                if (callback)
                    callback(new Error('Write failed'));
                return true;
            });
            await expect(cli_io_host_1.CliIoHost.getIoHost().notify({
                time: new Date(),
                level: 'info',
                action: 'synth',
                code: 'CDK_TOOLKIT_I0001',
                message: 'test message',
                forceStdout: true,
            })).rejects.toThrow('Write failed');
        });
    });
});
//# sourceMappingURL=data:application/json;base64,