"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockSdk = exports.MockSdkProvider = exports.setDefaultSTSMocks = exports.restoreSdkMocksToDefault = exports.mockSTSClient = exports.mockStepFunctionsClient = exports.mockSSMClient = exports.mockSecretsManagerClient = exports.mockS3Client = exports.mockRoute53Client = exports.mockLambdaClient = exports.mockKMSClient = exports.mockIAMClient = exports.mockElasticLoadBalancingV2Client = exports.mockECSClient = exports.mockECRClient = exports.mockEC2Client = exports.mockCodeBuildClient = exports.mockCloudWatchClient = exports.mockCloudFormationClient = exports.mockAppSyncClient = exports.FAKE_CREDENTIAL_CHAIN = exports.FAKE_CREDENTIALS = void 0;
exports.mockBootstrapStack = mockBootstrapStack;
exports.mockResolvedEnvironment = mockResolvedEnvironment;
require("aws-sdk-client-mock-jest");
const client_appsync_1 = require("@aws-sdk/client-appsync");
const client_cloudformation_1 = require("@aws-sdk/client-cloudformation");
const client_cloudwatch_logs_1 = require("@aws-sdk/client-cloudwatch-logs");
const client_codebuild_1 = require("@aws-sdk/client-codebuild");
const client_ec2_1 = require("@aws-sdk/client-ec2");
const client_ecr_1 = require("@aws-sdk/client-ecr");
const client_ecs_1 = require("@aws-sdk/client-ecs");
const client_elastic_load_balancing_v2_1 = require("@aws-sdk/client-elastic-load-balancing-v2");
const client_iam_1 = require("@aws-sdk/client-iam");
const client_kms_1 = require("@aws-sdk/client-kms");
const client_lambda_1 = require("@aws-sdk/client-lambda");
const client_route_53_1 = require("@aws-sdk/client-route-53");
const client_s3_1 = require("@aws-sdk/client-s3");
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const client_sfn_1 = require("@aws-sdk/client-sfn");
const client_ssm_1 = require("@aws-sdk/client-ssm");
const client_sts_1 = require("@aws-sdk/client-sts");
const credential_providers_1 = require("@aws-sdk/credential-providers");
const aws_sdk_client_mock_1 = require("aws-sdk-client-mock");
const lib_1 = require("../../lib");
const cloudformation_1 = require("../../lib/api/util/cloudformation");
exports.FAKE_CREDENTIALS = {
    accessKeyId: 'ACCESS',
    secretAccessKey: 'SECRET',
    sessionToken: 'TOKEN ',
};
exports.FAKE_CREDENTIAL_CHAIN = (0, credential_providers_1.createCredentialChain)(() => Promise.resolve(exports.FAKE_CREDENTIALS));
// Default implementations
exports.mockAppSyncClient = (0, aws_sdk_client_mock_1.mockClient)(client_appsync_1.AppSyncClient);
exports.mockCloudFormationClient = (0, aws_sdk_client_mock_1.mockClient)(client_cloudformation_1.CloudFormationClient);
exports.mockCloudWatchClient = (0, aws_sdk_client_mock_1.mockClient)(client_cloudwatch_logs_1.CloudWatchLogsClient);
exports.mockCodeBuildClient = (0, aws_sdk_client_mock_1.mockClient)(client_codebuild_1.CodeBuildClient);
exports.mockEC2Client = (0, aws_sdk_client_mock_1.mockClient)(client_ec2_1.EC2Client);
exports.mockECRClient = (0, aws_sdk_client_mock_1.mockClient)(client_ecr_1.ECRClient);
exports.mockECSClient = (0, aws_sdk_client_mock_1.mockClient)(client_ecs_1.ECSClient);
exports.mockElasticLoadBalancingV2Client = (0, aws_sdk_client_mock_1.mockClient)(client_elastic_load_balancing_v2_1.ElasticLoadBalancingV2Client);
exports.mockIAMClient = (0, aws_sdk_client_mock_1.mockClient)(client_iam_1.IAMClient);
exports.mockKMSClient = (0, aws_sdk_client_mock_1.mockClient)(client_kms_1.KMSClient);
exports.mockLambdaClient = (0, aws_sdk_client_mock_1.mockClient)(client_lambda_1.LambdaClient);
exports.mockRoute53Client = (0, aws_sdk_client_mock_1.mockClient)(client_route_53_1.Route53Client);
exports.mockS3Client = (0, aws_sdk_client_mock_1.mockClient)(client_s3_1.S3Client);
exports.mockSecretsManagerClient = (0, aws_sdk_client_mock_1.mockClient)(client_secrets_manager_1.SecretsManagerClient);
exports.mockSSMClient = (0, aws_sdk_client_mock_1.mockClient)(client_ssm_1.SSMClient);
exports.mockStepFunctionsClient = (0, aws_sdk_client_mock_1.mockClient)(client_sfn_1.SFNClient);
exports.mockSTSClient = (0, aws_sdk_client_mock_1.mockClient)(client_sts_1.STSClient);
/**
 * Resets clients back to defaults and resets the history
 * of usage of the mock.
 */
const restoreSdkMocksToDefault = () => {
    exports.mockAppSyncClient.reset();
    exports.mockAppSyncClient.onAnyCommand().resolves({});
    exports.mockCloudFormationClient.reset();
    exports.mockCloudFormationClient.onAnyCommand().resolves({});
    exports.mockCloudWatchClient.reset();
    exports.mockCloudWatchClient.onAnyCommand().resolves({});
    exports.mockCodeBuildClient.reset();
    exports.mockCodeBuildClient.onAnyCommand().resolves({});
    exports.mockEC2Client.reset();
    exports.mockEC2Client.onAnyCommand().resolves({});
    exports.mockECRClient.reset();
    exports.mockECRClient.onAnyCommand().resolves({});
    exports.mockECSClient.reset();
    exports.mockECSClient.onAnyCommand().resolves({});
    exports.mockElasticLoadBalancingV2Client.reset();
    exports.mockElasticLoadBalancingV2Client.onAnyCommand().resolves({});
    exports.mockIAMClient.reset();
    exports.mockIAMClient.onAnyCommand().resolves({});
    exports.mockKMSClient.reset();
    exports.mockKMSClient.onAnyCommand().resolves({});
    exports.mockLambdaClient.reset();
    exports.mockLambdaClient.onAnyCommand().resolves({});
    exports.mockRoute53Client.reset();
    exports.mockRoute53Client.onAnyCommand().resolves({});
    exports.mockS3Client.reset();
    exports.mockS3Client.onAnyCommand().resolves({});
    exports.mockSecretsManagerClient.reset();
    exports.mockSecretsManagerClient.onAnyCommand().resolves({});
    exports.mockSSMClient.reset();
    exports.mockSSMClient.onAnyCommand().resolves({});
    exports.mockStepFunctionsClient.reset();
    exports.mockSSMClient.onAnyCommand().resolves({});
    exports.mockSTSClient.reset();
};
exports.restoreSdkMocksToDefault = restoreSdkMocksToDefault;
const setDefaultSTSMocks = () => {
    exports.mockSTSClient.on(client_sts_1.GetCallerIdentityCommand).resolves({
        Account: '123456789012',
        Arn: 'aws:swa:123456789012:some-other-stuff',
    });
    exports.mockSTSClient.on(client_sts_1.AssumeRoleCommand).resolves({
        Credentials: {
            AccessKeyId: exports.FAKE_CREDENTIALS.accessKeyId,
            SecretAccessKey: exports.FAKE_CREDENTIALS.secretAccessKey,
            SessionToken: exports.FAKE_CREDENTIALS.sessionToken,
            Expiration: new Date(Date.now() + 3600 * 1000),
        },
    });
};
exports.setDefaultSTSMocks = setDefaultSTSMocks;
/**
 * MockSdkProvider that is mostly SdkProvider but
 * with fake credentials and account information.
 *
 * For mocking the actual clients, the above mocking
 * clients may be used.
 */
class MockSdkProvider extends lib_1.SdkProvider {
    constructor() {
        super(exports.FAKE_CREDENTIAL_CHAIN, 'bermuda-triangle-1337');
    }
    defaultAccount() {
        return Promise.resolve({ accountId: '123456789012', partition: 'aws' });
    }
}
exports.MockSdkProvider = MockSdkProvider;
/**
 * MockSdk that is mostly just the SDK but with fake
 * credentials and a full set of default client mocks.
 * These individual functions within those clients can be
 * customized in the test file that uses it.
 */
class MockSdk extends lib_1.SDK {
    constructor() {
        super(exports.FAKE_CREDENTIAL_CHAIN, 'bermuda-triangle-1337', {});
    }
}
exports.MockSdk = MockSdk;
function mockBootstrapStack(stack) {
    return cloudformation_1.CloudFormationStack.fromStaticInformation(new MockSdk().cloudFormation(), 'CDKToolkit', {
        CreationTime: new Date(),
        StackName: 'CDKToolkit',
        StackStatus: client_cloudformation_1.StackStatus.CREATE_COMPLETE,
        ...stack,
        Outputs: [
            { OutputKey: 'BucketName', OutputValue: 'BUCKET_NAME' },
            { OutputKey: 'BucketDomainName', OutputValue: 'BUCKET_ENDPOINT' },
            { OutputKey: 'ImageRepositoryName', OutputValue: 'REPO_NAME' },
            { OutputKey: 'BootstrapVersion', OutputValue: '1' },
            ...(stack?.Outputs ?? []),
        ],
    });
}
function mockResolvedEnvironment() {
    return {
        account: '123456789',
        region: 'bermuda-triangle-1337',
        name: 'aws://123456789/bermuda-triangle-1337',
    };
}
//# sourceMappingURL=data:application/json;base64,